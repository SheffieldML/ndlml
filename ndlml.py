# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ndlml', [dirname(__file__)])
        except ImportError:
            import _ndlml
            return _ndlml
        if fp is not None:
            try:
                _mod = imp.load_module('_ndlml', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ndlml = swig_import_helper()
    del swig_import_helper
else:
    import _ndlml
del version_info
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def getCArrayFromPyObject(*args):
  return _ndlml.getCArrayFromPyObject(*args)
getCArrayFromPyObject = _ndlml.getCArrayFromPyObject

def getIndices(*args):
  return _ndlml.getIndices(*args)
getIndices = _ndlml.getIndices
class SwigPyIterator:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ndlml.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _ndlml.SwigPyIterator_value(self)
    def incr(self, n=1): return _ndlml.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _ndlml.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _ndlml.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _ndlml.SwigPyIterator_equal(self, *args)
    def copy(self): return _ndlml.SwigPyIterator_copy(self)
    def next(self): return _ndlml.SwigPyIterator_next(self)
    def __next__(self): return _ndlml.SwigPyIterator___next__(self)
    def previous(self): return _ndlml.SwigPyIterator_previous(self)
    def advance(self, *args): return _ndlml.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _ndlml.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _ndlml.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _ndlml.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _ndlml.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _ndlml.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _ndlml.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _ndlml.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vectori:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectori, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectori, name)
    __repr__ = _swig_repr
    def iterator(self): return _ndlml.vectori_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _ndlml.vectori___nonzero__(self)
    def __bool__(self): return _ndlml.vectori___bool__(self)
    def __len__(self): return _ndlml.vectori___len__(self)
    def pop(self): return _ndlml.vectori_pop(self)
    def __getslice__(self, *args): return _ndlml.vectori___getslice__(self, *args)
    def __setslice__(self, *args): return _ndlml.vectori___setslice__(self, *args)
    def __delslice__(self, *args): return _ndlml.vectori___delslice__(self, *args)
    def __delitem__(self, *args): return _ndlml.vectori___delitem__(self, *args)
    def __getitem__(self, *args): return _ndlml.vectori___getitem__(self, *args)
    def __setitem__(self, *args): return _ndlml.vectori___setitem__(self, *args)
    def append(self, *args): return _ndlml.vectori_append(self, *args)
    def empty(self): return _ndlml.vectori_empty(self)
    def size(self): return _ndlml.vectori_size(self)
    def clear(self): return _ndlml.vectori_clear(self)
    def swap(self, *args): return _ndlml.vectori_swap(self, *args)
    def get_allocator(self): return _ndlml.vectori_get_allocator(self)
    def begin(self): return _ndlml.vectori_begin(self)
    def end(self): return _ndlml.vectori_end(self)
    def rbegin(self): return _ndlml.vectori_rbegin(self)
    def rend(self): return _ndlml.vectori_rend(self)
    def pop_back(self): return _ndlml.vectori_pop_back(self)
    def erase(self, *args): return _ndlml.vectori_erase(self, *args)
    def __init__(self, *args): 
        this = _ndlml.new_vectori(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _ndlml.vectori_push_back(self, *args)
    def front(self): return _ndlml.vectori_front(self)
    def back(self): return _ndlml.vectori_back(self)
    def assign(self, *args): return _ndlml.vectori_assign(self, *args)
    def resize(self, *args): return _ndlml.vectori_resize(self, *args)
    def insert(self, *args): return _ndlml.vectori_insert(self, *args)
    def reserve(self, *args): return _ndlml.vectori_reserve(self, *args)
    def capacity(self): return _ndlml.vectori_capacity(self)
    __swig_destroy__ = _ndlml.delete_vectori
    __del__ = lambda self : None;
vectori_swigregister = _ndlml.vectori_swigregister
vectori_swigregister(vectori)

class vectorui:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorui, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorui, name)
    __repr__ = _swig_repr
    def iterator(self): return _ndlml.vectorui_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _ndlml.vectorui___nonzero__(self)
    def __bool__(self): return _ndlml.vectorui___bool__(self)
    def __len__(self): return _ndlml.vectorui___len__(self)
    def pop(self): return _ndlml.vectorui_pop(self)
    def __getslice__(self, *args): return _ndlml.vectorui___getslice__(self, *args)
    def __setslice__(self, *args): return _ndlml.vectorui___setslice__(self, *args)
    def __delslice__(self, *args): return _ndlml.vectorui___delslice__(self, *args)
    def __delitem__(self, *args): return _ndlml.vectorui___delitem__(self, *args)
    def __getitem__(self, *args): return _ndlml.vectorui___getitem__(self, *args)
    def __setitem__(self, *args): return _ndlml.vectorui___setitem__(self, *args)
    def append(self, *args): return _ndlml.vectorui_append(self, *args)
    def empty(self): return _ndlml.vectorui_empty(self)
    def size(self): return _ndlml.vectorui_size(self)
    def clear(self): return _ndlml.vectorui_clear(self)
    def swap(self, *args): return _ndlml.vectorui_swap(self, *args)
    def get_allocator(self): return _ndlml.vectorui_get_allocator(self)
    def begin(self): return _ndlml.vectorui_begin(self)
    def end(self): return _ndlml.vectorui_end(self)
    def rbegin(self): return _ndlml.vectorui_rbegin(self)
    def rend(self): return _ndlml.vectorui_rend(self)
    def pop_back(self): return _ndlml.vectorui_pop_back(self)
    def erase(self, *args): return _ndlml.vectorui_erase(self, *args)
    def __init__(self, *args): 
        this = _ndlml.new_vectorui(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _ndlml.vectorui_push_back(self, *args)
    def front(self): return _ndlml.vectorui_front(self)
    def back(self): return _ndlml.vectorui_back(self)
    def assign(self, *args): return _ndlml.vectorui_assign(self, *args)
    def resize(self, *args): return _ndlml.vectorui_resize(self, *args)
    def insert(self, *args): return _ndlml.vectorui_insert(self, *args)
    def reserve(self, *args): return _ndlml.vectorui_reserve(self, *args)
    def capacity(self): return _ndlml.vectorui_capacity(self)
    __swig_destroy__ = _ndlml.delete_vectorui
    __del__ = lambda self : None;
vectorui_swigregister = _ndlml.vectorui_swigregister
vectorui_swigregister(vectorui)

class vectors:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectors, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectors, name)
    __repr__ = _swig_repr
    def iterator(self): return _ndlml.vectors_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _ndlml.vectors___nonzero__(self)
    def __bool__(self): return _ndlml.vectors___bool__(self)
    def __len__(self): return _ndlml.vectors___len__(self)
    def pop(self): return _ndlml.vectors_pop(self)
    def __getslice__(self, *args): return _ndlml.vectors___getslice__(self, *args)
    def __setslice__(self, *args): return _ndlml.vectors___setslice__(self, *args)
    def __delslice__(self, *args): return _ndlml.vectors___delslice__(self, *args)
    def __delitem__(self, *args): return _ndlml.vectors___delitem__(self, *args)
    def __getitem__(self, *args): return _ndlml.vectors___getitem__(self, *args)
    def __setitem__(self, *args): return _ndlml.vectors___setitem__(self, *args)
    def append(self, *args): return _ndlml.vectors_append(self, *args)
    def empty(self): return _ndlml.vectors_empty(self)
    def size(self): return _ndlml.vectors_size(self)
    def clear(self): return _ndlml.vectors_clear(self)
    def swap(self, *args): return _ndlml.vectors_swap(self, *args)
    def get_allocator(self): return _ndlml.vectors_get_allocator(self)
    def begin(self): return _ndlml.vectors_begin(self)
    def end(self): return _ndlml.vectors_end(self)
    def rbegin(self): return _ndlml.vectors_rbegin(self)
    def rend(self): return _ndlml.vectors_rend(self)
    def pop_back(self): return _ndlml.vectors_pop_back(self)
    def erase(self, *args): return _ndlml.vectors_erase(self, *args)
    def __init__(self, *args): 
        this = _ndlml.new_vectors(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _ndlml.vectors_push_back(self, *args)
    def front(self): return _ndlml.vectors_front(self)
    def back(self): return _ndlml.vectors_back(self)
    def assign(self, *args): return _ndlml.vectors_assign(self, *args)
    def resize(self, *args): return _ndlml.vectors_resize(self, *args)
    def insert(self, *args): return _ndlml.vectors_insert(self, *args)
    def reserve(self, *args): return _ndlml.vectors_reserve(self, *args)
    def capacity(self): return _ndlml.vectors_capacity(self)
    __swig_destroy__ = _ndlml.delete_vectors
    __del__ = lambda self : None;
vectors_swigregister = _ndlml.vectors_swigregister
vectors_swigregister(vectors)

class vectord:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectord, name)
    __repr__ = _swig_repr
    def iterator(self): return _ndlml.vectord_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _ndlml.vectord___nonzero__(self)
    def __bool__(self): return _ndlml.vectord___bool__(self)
    def __len__(self): return _ndlml.vectord___len__(self)
    def pop(self): return _ndlml.vectord_pop(self)
    def __getslice__(self, *args): return _ndlml.vectord___getslice__(self, *args)
    def __setslice__(self, *args): return _ndlml.vectord___setslice__(self, *args)
    def __delslice__(self, *args): return _ndlml.vectord___delslice__(self, *args)
    def __delitem__(self, *args): return _ndlml.vectord___delitem__(self, *args)
    def __getitem__(self, *args): return _ndlml.vectord___getitem__(self, *args)
    def __setitem__(self, *args): return _ndlml.vectord___setitem__(self, *args)
    def append(self, *args): return _ndlml.vectord_append(self, *args)
    def empty(self): return _ndlml.vectord_empty(self)
    def size(self): return _ndlml.vectord_size(self)
    def clear(self): return _ndlml.vectord_clear(self)
    def swap(self, *args): return _ndlml.vectord_swap(self, *args)
    def get_allocator(self): return _ndlml.vectord_get_allocator(self)
    def begin(self): return _ndlml.vectord_begin(self)
    def end(self): return _ndlml.vectord_end(self)
    def rbegin(self): return _ndlml.vectord_rbegin(self)
    def rend(self): return _ndlml.vectord_rend(self)
    def pop_back(self): return _ndlml.vectord_pop_back(self)
    def erase(self, *args): return _ndlml.vectord_erase(self, *args)
    def __init__(self, *args): 
        this = _ndlml.new_vectord(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _ndlml.vectord_push_back(self, *args)
    def front(self): return _ndlml.vectord_front(self)
    def back(self): return _ndlml.vectord_back(self)
    def assign(self, *args): return _ndlml.vectord_assign(self, *args)
    def resize(self, *args): return _ndlml.vectord_resize(self, *args)
    def insert(self, *args): return _ndlml.vectord_insert(self, *args)
    def reserve(self, *args): return _ndlml.vectord_reserve(self, *args)
    def capacity(self): return _ndlml.vectord_capacity(self)
    __swig_destroy__ = _ndlml.delete_vectord
    __del__ = lambda self : None;
vectord_swigregister = _ndlml.vectord_swigregister
vectord_swigregister(vectord)

class vectorm:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorm, name)
    __repr__ = _swig_repr
    def iterator(self): return _ndlml.vectorm_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _ndlml.vectorm___nonzero__(self)
    def __bool__(self): return _ndlml.vectorm___bool__(self)
    def __len__(self): return _ndlml.vectorm___len__(self)
    def pop(self): return _ndlml.vectorm_pop(self)
    def __getslice__(self, *args): return _ndlml.vectorm___getslice__(self, *args)
    def __setslice__(self, *args): return _ndlml.vectorm___setslice__(self, *args)
    def __delslice__(self, *args): return _ndlml.vectorm___delslice__(self, *args)
    def __delitem__(self, *args): return _ndlml.vectorm___delitem__(self, *args)
    def __getitem__(self, *args): return _ndlml.vectorm___getitem__(self, *args)
    def __setitem__(self, *args): return _ndlml.vectorm___setitem__(self, *args)
    def append(self, *args): return _ndlml.vectorm_append(self, *args)
    def empty(self): return _ndlml.vectorm_empty(self)
    def size(self): return _ndlml.vectorm_size(self)
    def clear(self): return _ndlml.vectorm_clear(self)
    def swap(self, *args): return _ndlml.vectorm_swap(self, *args)
    def get_allocator(self): return _ndlml.vectorm_get_allocator(self)
    def begin(self): return _ndlml.vectorm_begin(self)
    def end(self): return _ndlml.vectorm_end(self)
    def rbegin(self): return _ndlml.vectorm_rbegin(self)
    def rend(self): return _ndlml.vectorm_rend(self)
    def pop_back(self): return _ndlml.vectorm_pop_back(self)
    def erase(self, *args): return _ndlml.vectorm_erase(self, *args)
    def __init__(self, *args): 
        this = _ndlml.new_vectorm(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _ndlml.vectorm_push_back(self, *args)
    def front(self): return _ndlml.vectorm_front(self)
    def back(self): return _ndlml.vectorm_back(self)
    def assign(self, *args): return _ndlml.vectorm_assign(self, *args)
    def resize(self, *args): return _ndlml.vectorm_resize(self, *args)
    def insert(self, *args): return _ndlml.vectorm_insert(self, *args)
    def reserve(self, *args): return _ndlml.vectorm_reserve(self, *args)
    def capacity(self): return _ndlml.vectorm_capacity(self)
    __swig_destroy__ = _ndlml.delete_vectorm
    __del__ = lambda self : None;
vectorm_swigregister = _ndlml.vectorm_swigregister
vectorm_swigregister(vectorm)

class vectork:
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectork, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectork, name)
    __repr__ = _swig_repr
    def iterator(self): return _ndlml.vectork_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _ndlml.vectork___nonzero__(self)
    def __bool__(self): return _ndlml.vectork___bool__(self)
    def __len__(self): return _ndlml.vectork___len__(self)
    def pop(self): return _ndlml.vectork_pop(self)
    def __getslice__(self, *args): return _ndlml.vectork___getslice__(self, *args)
    def __setslice__(self, *args): return _ndlml.vectork___setslice__(self, *args)
    def __delslice__(self, *args): return _ndlml.vectork___delslice__(self, *args)
    def __delitem__(self, *args): return _ndlml.vectork___delitem__(self, *args)
    def __getitem__(self, *args): return _ndlml.vectork___getitem__(self, *args)
    def __setitem__(self, *args): return _ndlml.vectork___setitem__(self, *args)
    def append(self, *args): return _ndlml.vectork_append(self, *args)
    def empty(self): return _ndlml.vectork_empty(self)
    def size(self): return _ndlml.vectork_size(self)
    def clear(self): return _ndlml.vectork_clear(self)
    def swap(self, *args): return _ndlml.vectork_swap(self, *args)
    def get_allocator(self): return _ndlml.vectork_get_allocator(self)
    def begin(self): return _ndlml.vectork_begin(self)
    def end(self): return _ndlml.vectork_end(self)
    def rbegin(self): return _ndlml.vectork_rbegin(self)
    def rend(self): return _ndlml.vectork_rend(self)
    def pop_back(self): return _ndlml.vectork_pop_back(self)
    def erase(self, *args): return _ndlml.vectork_erase(self, *args)
    def __init__(self, *args): 
        this = _ndlml.new_vectork(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _ndlml.vectork_push_back(self, *args)
    def front(self): return _ndlml.vectork_front(self)
    def back(self): return _ndlml.vectork_back(self)
    def assign(self, *args): return _ndlml.vectork_assign(self, *args)
    def resize(self, *args): return _ndlml.vectork_resize(self, *args)
    def insert(self, *args): return _ndlml.vectork_insert(self, *args)
    def reserve(self, *args): return _ndlml.vectork_reserve(self, *args)
    def capacity(self): return _ndlml.vectork_capacity(self)
    __swig_destroy__ = _ndlml.delete_vectork
    __del__ = lambda self : None;
vectork_swigregister = _ndlml.vectork_swigregister
vectork_swigregister(vectork)

class CStreamInterface:
    """Proxy of C++ CStreamInterface class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CStreamInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CStreamInterface, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ndlml.delete_CStreamInterface
    __del__ = lambda self : None;
    def toStream(self, *args):
        """toStream(CStreamInterface self, ostream & out)"""
        return _ndlml.CStreamInterface_toStream(self, *args)

    __swig_getmethods__["readVersionFromStream"] = lambda x: _ndlml.CStreamInterface_readVersionFromStream
    __swig_getmethods__["readIntFromStream"] = lambda x: _ndlml.CStreamInterface_readIntFromStream
    __swig_getmethods__["readDoubleFromStream"] = lambda x: _ndlml.CStreamInterface_readDoubleFromStream
    __swig_getmethods__["readBoolFromStream"] = lambda x: _ndlml.CStreamInterface_readBoolFromStream
    __swig_getmethods__["readVectorIntFromStream"] = lambda x: _ndlml.CStreamInterface_readVectorIntFromStream
    __swig_getmethods__["readVectorUintFromStream"] = lambda x: _ndlml.CStreamInterface_readVectorUintFromStream
    __swig_getmethods__["readStringFromStream"] = lambda x: _ndlml.CStreamInterface_readStringFromStream
    __swig_getmethods__["writeToStream"] = lambda x: _ndlml.CStreamInterface_writeToStream
    __swig_getmethods__["getBaseTypeStream"] = lambda x: _ndlml.CStreamInterface_getBaseTypeStream
    __swig_getmethods__["getTypeStream"] = lambda x: _ndlml.CStreamInterface_getTypeStream
    def fromStream(self, *args):
        """fromStream(CStreamInterface self, istream & _in)"""
        return _ndlml.CStreamInterface_fromStream(self, *args)

    def getCurrentVersion(self):
        """getCurrentVersion(CStreamInterface self) -> double"""
        return _ndlml.CStreamInterface_getCurrentVersion(self)

    __swig_getmethods__["getMinCompatVersion"] = lambda x: _ndlml.CStreamInterface_getMinCompatVersion
    def writeParamsToStream(self, *args):
        """writeParamsToStream(CStreamInterface self, ostream & out)"""
        return _ndlml.CStreamInterface_writeParamsToStream(self, *args)

    def readParamsFromStream(self, *args):
        """readParamsFromStream(CStreamInterface self, istream & out)"""
        return _ndlml.CStreamInterface_readParamsFromStream(self, *args)

    def toFile(self, *args):
        """
        toFile(CStreamInterface self, std::string const fileName, std::string const comment="")
        toFile(CStreamInterface self, std::string const fileName)
        """
        return _ndlml.CStreamInterface_toFile(self, *args)

    def fromFile(self, *args):
        """fromFile(CStreamInterface self, std::string const fileName)"""
        return _ndlml.CStreamInterface_fromFile(self, *args)

CStreamInterface_swigregister = _ndlml.CStreamInterface_swigregister
CStreamInterface_swigregister(CStreamInterface)
cvar = _ndlml.cvar
MINVERSION = cvar.MINVERSION
VERSION = cvar.VERSION

def CStreamInterface_readVersionFromStream(*args):
  """CStreamInterface_readVersionFromStream(istream & _in) -> double"""
  return _ndlml.CStreamInterface_readVersionFromStream(*args)

def CStreamInterface_readIntFromStream(*args):
  """CStreamInterface_readIntFromStream(istream & _in, std::string const fieldName) -> int"""
  return _ndlml.CStreamInterface_readIntFromStream(*args)

def CStreamInterface_readDoubleFromStream(*args):
  """CStreamInterface_readDoubleFromStream(istream & _in, std::string const fieldName) -> double"""
  return _ndlml.CStreamInterface_readDoubleFromStream(*args)

def CStreamInterface_readBoolFromStream(*args):
  """CStreamInterface_readBoolFromStream(istream & _in, std::string const fieldName) -> bool"""
  return _ndlml.CStreamInterface_readBoolFromStream(*args)

def CStreamInterface_readVectorIntFromStream(*args):
  """CStreamInterface_readVectorIntFromStream(istream & _in, std::string const fieldName) -> vectori"""
  return _ndlml.CStreamInterface_readVectorIntFromStream(*args)

def CStreamInterface_readVectorUintFromStream(*args):
  """CStreamInterface_readVectorUintFromStream(istream & _in, std::string const fieldName) -> vectorui"""
  return _ndlml.CStreamInterface_readVectorUintFromStream(*args)

def CStreamInterface_readStringFromStream(*args):
  """CStreamInterface_readStringFromStream(istream & _in, std::string const fieldName) -> std::string"""
  return _ndlml.CStreamInterface_readStringFromStream(*args)

def CStreamInterface_writeToStream(*args):
  """
    writeToStream(ostream & out, std::string const fieldName, vectori val)
    writeToStream(ostream & out, std::string const fieldName, vectorui val)
    writeToStream(ostream & out, std::string const fieldName, int const val)
    writeToStream(ostream & out, std::string const fieldName, unsigned int const val)
    writeToStream(ostream & out, std::string const fieldName, double const val)
    writeToStream(ostream & out, std::string const fieldName, bool const val)
    writeToStream(ostream & out, std::string const fieldName, std::string const val)
    CStreamInterface_writeToStream(ostream & out, std::string const fieldName, char const * val)
    """
  return _ndlml.CStreamInterface_writeToStream(*args)

def CStreamInterface_getBaseTypeStream(*args):
  """CStreamInterface_getBaseTypeStream(istream & _in) -> std::string"""
  return _ndlml.CStreamInterface_getBaseTypeStream(*args)

def CStreamInterface_getTypeStream(*args):
  """CStreamInterface_getTypeStream(istream & _in) -> std::string"""
  return _ndlml.CStreamInterface_getTypeStream(*args)

def CStreamInterface_getMinCompatVersion():
  """CStreamInterface_getMinCompatVersion() -> double"""
  return _ndlml.CStreamInterface_getMinCompatVersion()

class CMatInterface:
    """Proxy of C++ CMatInterface class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMatInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CMatInterface, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(CMatInterface self) -> CMatInterface"""
        this = _ndlml.new_CMatInterface()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ndlml.delete_CMatInterface
    __del__ = lambda self : None;
CMatInterface_swigregister = _ndlml.CMatInterface_swigregister
CMatInterface_swigregister(CMatInterface)

class matrix(CMatInterface,CStreamInterface):
    """Proxy of C++ CMatrix class"""
    __swig_setmethods__ = {}
    for _s in [CMatInterface,CStreamInterface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, matrix, name, value)
    __swig_getmethods__ = {}
    for _s in [CMatInterface,CStreamInterface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, matrix, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(CMatrix self) -> matrix
        __init__(CMatrix self, double val) -> matrix
        __init__(CMatrix self, unsigned int numRows, unsigned int numCols) -> matrix
        __init__(CMatrix self, unsigned int numRows, unsigned int numCols, double val) -> matrix
        __init__(CMatrix self, unsigned int numRows, unsigned int numCols, double * inVals) -> matrix
        __init__(CMatrix self, double * pythonInVals) -> matrix
        __init__(CMatrix self, unsigned int numRows, unsigned int numCols, vectord inVals) -> matrix
        __init__(CMatrix self, unsigned int numRows, unsigned int numCols, char type) -> matrix
        __init__(CMatrix self, unsigned int numRows, unsigned int numCols, char type, double val) -> matrix
        __init__(CMatrix self, matrix A, vectorui indices) -> matrix
        __init__(CMatrix self, matrix A, vectorui rowIndices, vectorui colIndices) -> matrix
        __init__(CMatrix self, matrix A) -> matrix
        """
        this = _ndlml.new_matrix(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ndlml.delete_matrix
    __del__ = lambda self : None;
    def deepCopy(self, *args):
        """deepCopy(matrix self, matrix A)"""
        return _ndlml.matrix_deepCopy(self, *args)

    def getRows(self):
        """getRows(matrix self) -> unsigned int"""
        return _ndlml.matrix_getRows(self)

    def getCols(self):
        """getCols(matrix self) -> unsigned int"""
        return _ndlml.matrix_getCols(self)

    def getNumElements(self):
        """getNumElements(matrix self) -> unsigned int"""
        return _ndlml.matrix_getNumElements(self)

    def getVals(self, *args):
        """
        getVals(matrix self) -> double
        getVals(matrix self) -> double const *
        """
        return _ndlml.matrix_getVals(self, *args)

    def getVector(self):
        """getVector(matrix self) -> vectord"""
        return _ndlml.matrix_getVector(self)

    def getVal(self, *args):
        """
        getVal(matrix self, unsigned int i, unsigned int j) -> double
        getVal(matrix self, unsigned int i) -> double
        """
        return _ndlml.matrix_getVal(self, *args)

    def setVals(self, *args):
        """setVals(matrix self, double val)"""
        return _ndlml.matrix_setVals(self, *args)

    def setVal(self, *args):
        """
        setVal(matrix self, double val, unsigned int i)
        setVal(matrix self, double val, unsigned int i, unsigned int j)
        """
        return _ndlml.matrix_setVal(self, *args)

    def addVal(self, *args):
        """
        addVal(matrix self, double val, unsigned int i)
        addVal(matrix self, double val, unsigned int i, unsigned int j)
        """
        return _ndlml.matrix_addVal(self, *args)

    def isAnyNan(self):
        """isAnyNan(matrix self) -> bool"""
        return _ndlml.matrix_isAnyNan(self)

    def isAnyInf(self):
        """isAnyInf(matrix self) -> bool"""
        return _ndlml.matrix_isAnyInf(self)

    def isSquare(self):
        """isSquare(matrix self) -> bool const"""
        return _ndlml.matrix_isSquare(self)

    def isTriangular(self):
        """isTriangular(matrix self) -> bool const"""
        return _ndlml.matrix_isTriangular(self)

    def setTriangular(self, *args):
        """setTriangular(matrix self, bool const val)"""
        return _ndlml.matrix_setTriangular(self, *args)

    def isSymmetric(self):
        """isSymmetric(matrix self) -> bool const"""
        return _ndlml.matrix_isSymmetric(self)

    def setSymmetric(self, *args):
        """setSymmetric(matrix self, bool const val)"""
        return _ndlml.matrix_setSymmetric(self, *args)

    def dimensionsMatch(self, *args):
        """dimensionsMatch(matrix self, matrix A) -> bool const"""
        return _ndlml.matrix_dimensionsMatch(self, *args)

    def rowsMatch(self, *args):
        """rowsMatch(matrix self, matrix A) -> bool const"""
        return _ndlml.matrix_rowsMatch(self, *args)

    def colsMatch(self, *args):
        """colsMatch(matrix self, matrix A) -> bool const"""
        return _ndlml.matrix_colsMatch(self, *args)

    def sumCol(self, *args):
        """sumCol(matrix self, matrix A, double alpha, double beta)"""
        return _ndlml.matrix_sumCol(self, *args)

    def sumRow(self, *args):
        """sumRow(matrix self, matrix A, double alpha, double beta)"""
        return _ndlml.matrix_sumRow(self, *args)

    def copySymmetric(self, *args):
        """copySymmetric(matrix self, char const * type)"""
        return _ndlml.matrix_copySymmetric(self, *args)

    def copyRowRow(self, *args):
        """copyRowRow(matrix self, unsigned int i, matrix X, unsigned int k)"""
        return _ndlml.matrix_copyRowRow(self, *args)

    def copyColCol(self, *args):
        """copyColCol(matrix self, unsigned int j, matrix X, unsigned int k)"""
        return _ndlml.matrix_copyColCol(self, *args)

    def scale(self, *args):
        """scale(matrix self, double alpha)"""
        return _ndlml.matrix_scale(self, *args)

    def scaleCol(self, *args):
        """scaleCol(matrix self, unsigned int j, double alpha)"""
        return _ndlml.matrix_scaleCol(self, *args)

    def scaleRow(self, *args):
        """scaleRow(matrix self, unsigned int i, double alpha)"""
        return _ndlml.matrix_scaleRow(self, *args)

    def axpy(self, *args):
        """axpy(matrix self, matrix x, double alpha)"""
        return _ndlml.matrix_axpy(self, *args)

    def axpyRowRow(self, *args):
        """axpyRowRow(matrix self, unsigned int i, matrix x, unsigned int k, double alpha)"""
        return _ndlml.matrix_axpyRowRow(self, *args)

    def axpyRowCol(self, *args):
        """axpyRowCol(matrix self, unsigned int i, matrix x, unsigned int j, double alpha)"""
        return _ndlml.matrix_axpyRowCol(self, *args)

    def axpyColCol(self, *args):
        """axpyColCol(matrix self, unsigned int j, matrix x, unsigned int k, double alpha)"""
        return _ndlml.matrix_axpyColCol(self, *args)

    def axpyColRow(self, *args):
        """axpyColRow(matrix self, unsigned int j, matrix x, unsigned int i, double alpha)"""
        return _ndlml.matrix_axpyColRow(self, *args)

    def axpyDiagRow(self, *args):
        """axpyDiagRow(matrix self, matrix x, unsigned int i, double alpha)"""
        return _ndlml.matrix_axpyDiagRow(self, *args)

    def axpyDiagCol(self, *args):
        """axpyDiagCol(matrix self, matrix x, unsigned int j, double alpha)"""
        return _ndlml.matrix_axpyDiagCol(self, *args)

    def ger(self, *args):
        """ger(matrix self, matrix x, matrix y, double alpha)"""
        return _ndlml.matrix_ger(self, *args)

    def gerRowRow(self, *args):
        """gerRowRow(matrix self, matrix x, unsigned int i, matrix y, unsigned int k, double alpha)"""
        return _ndlml.matrix_gerRowRow(self, *args)

    def gerRowCol(self, *args):
        """gerRowCol(matrix self, matrix x, unsigned int i, matrix y, unsigned int j, double alpha)"""
        return _ndlml.matrix_gerRowCol(self, *args)

    def gerColCol(self, *args):
        """gerColCol(matrix self, matrix x, unsigned int j, matrix y, unsigned int k, double alpha)"""
        return _ndlml.matrix_gerColCol(self, *args)

    def gerColRow(self, *args):
        """gerColRow(matrix self, matrix x, unsigned int j, matrix y, unsigned int i, double alpha)"""
        return _ndlml.matrix_gerColRow(self, *args)

    def syr(self, *args):
        """syr(matrix self, matrix x, double alpha, char const * type)"""
        return _ndlml.matrix_syr(self, *args)

    def syrRow(self, *args):
        """syrRow(matrix self, matrix x, unsigned int i, double alpha, char const * type)"""
        return _ndlml.matrix_syrRow(self, *args)

    def syrCol(self, *args):
        """syrCol(matrix self, matrix x, unsigned int j, double alpha, char const * type)"""
        return _ndlml.matrix_syrCol(self, *args)

    def dist2Row(self, *args):
        """dist2Row(matrix self, unsigned int i, matrix A, unsigned int k) -> double"""
        return _ndlml.matrix_dist2Row(self, *args)

    def dist2Col(self, *args):
        """dist2Col(matrix self, unsigned int j, matrix A, unsigned int k) -> double"""
        return _ndlml.matrix_dist2Col(self, *args)

    def normRow(self, *args):
        """normRow(matrix self, unsigned int i) -> double"""
        return _ndlml.matrix_normRow(self, *args)

    def norm2Row(self, *args):
        """norm2Row(matrix self, unsigned int i) -> double"""
        return _ndlml.matrix_norm2Row(self, *args)

    def normCol(self, *args):
        """normCol(matrix self, unsigned int j) -> double"""
        return _ndlml.matrix_normCol(self, *args)

    def norm2Col(self, *args):
        """norm2Col(matrix self, unsigned int j) -> double"""
        return _ndlml.matrix_norm2Col(self, *args)

    def dotRowRow(self, *args):
        """dotRowRow(matrix self, unsigned int i, matrix A, unsigned int k) -> double"""
        return _ndlml.matrix_dotRowRow(self, *args)

    def dotRowCol(self, *args):
        """dotRowCol(matrix self, unsigned int i, matrix A, unsigned int j) -> double"""
        return _ndlml.matrix_dotRowCol(self, *args)

    def dotColCol(self, *args):
        """dotColCol(matrix self, unsigned int j, matrix A, unsigned int k) -> double"""
        return _ndlml.matrix_dotColCol(self, *args)

    def dotColRow(self, *args):
        """dotColRow(matrix self, unsigned int j, matrix A, unsigned int i) -> double"""
        return _ndlml.matrix_dotColRow(self, *args)

    def swapCols(self, *args):
        """swapCols(matrix self, unsigned int j, unsigned int k)"""
        return _ndlml.matrix_swapCols(self, *args)

    def swapRows(self, *args):
        """swapRows(matrix self, unsigned int i, unsigned int k)"""
        return _ndlml.matrix_swapRows(self, *args)

    def appendCols(self, *args):
        """appendCols(matrix self, matrix A)"""
        return _ndlml.matrix_appendCols(self, *args)

    def appendRows(self, *args):
        """appendRows(matrix self, matrix A)"""
        return _ndlml.matrix_appendRows(self, *args)

    def getMatrix(self, *args):
        """
        getMatrix(matrix self, matrix matrixOut, unsigned int firstRow, unsigned int lastRow, unsigned int firstCol, 
            unsigned int lastCol)
        getMatrix(matrix self, matrix matrixOut, vectorui rows, unsigned int firstCol, unsigned int lastCol)
        getMatrix(matrix self, matrix matrixOut, unsigned int firstRow, unsigned int lastRow, vectorui cols)
        getMatrix(matrix self, matrix matrixOut, vectorui rows, vectorui cols)
        """
        return _ndlml.matrix_getMatrix(self, *args)

    def setMatrix(self, *args):
        """
        setMatrix(matrix self, unsigned int row, unsigned int col, matrix A)
        setMatrix(matrix self, vectorui rows, unsigned int col, matrix A)
        setMatrix(matrix self, unsigned int row, vectorui cols, matrix A)
        setMatrix(matrix self, vectorui rows, vectorui cols, matrix A)
        """
        return _ndlml.matrix_setMatrix(self, *args)

    def dtrans(self, *args):
        """dtrans(matrix self, int lwork)"""
        return _ndlml.matrix_dtrans(self, *args)

    def dtransr(self, *args):
        """dtransr(matrix self, int lwork)"""
        return _ndlml.matrix_dtransr(self, *args)

    def dxpose(self, *args):
        """dxpose(matrix self, int lwork)"""
        return _ndlml.matrix_dxpose(self, *args)

    def trans(self):
        """trans(matrix self)"""
        return _ndlml.matrix_trans(self)

    def multiply(self, *args):
        """multiply(matrix self, matrix A)"""
        return _ndlml.matrix_multiply(self, *args)

    def addCol(self, *args):
        """addCol(matrix self, unsigned int j, double c)"""
        return _ndlml.matrix_addCol(self, *args)

    def addRow(self, *args):
        """addRow(matrix self, unsigned int i, double c)"""
        return _ndlml.matrix_addRow(self, *args)

    def addDiag(self, *args):
        """addDiag(matrix self, double c)"""
        return _ndlml.matrix_addDiag(self, *args)

    def add(self, *args):
        """
        add(matrix self, double c)
        add(matrix self, matrix A)
        """
        return _ndlml.matrix_add(self, *args)

    def subtract(self, *args):
        """
        subtract(matrix self, double c)
        subtract(matrix self, matrix A)
        """
        return _ndlml.matrix_subtract(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(matrix self, double c)
        __iadd__(matrix self, matrix A)
        """
        return _ndlml.matrix___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(matrix self, double c)
        __isub__(matrix self, matrix A)
        """
        return _ndlml.matrix___isub__(self, *args)

    def __imul__(self, *args):
        """
        __imul__(matrix self, double c)
        __imul__(matrix self, matrix A)
        """
        return _ndlml.matrix___imul__(self, *args)

    def __neg__(self):
        """__neg__(matrix self)"""
        return _ndlml.matrix___neg__(self)

    def dotMultiply(self, *args):
        """dotMultiply(matrix self, matrix A)"""
        return _ndlml.matrix_dotMultiply(self, *args)

    def dotMultiplyRowRow(self, *args):
        """dotMultiplyRowRow(matrix self, unsigned int i, matrix A, unsigned int k)"""
        return _ndlml.matrix_dotMultiplyRowRow(self, *args)

    def dotMultiplyRowCol(self, *args):
        """dotMultiplyRowCol(matrix self, unsigned int i, matrix A, unsigned int j)"""
        return _ndlml.matrix_dotMultiplyRowCol(self, *args)

    def dotMultiplyColRow(self, *args):
        """dotMultiplyColRow(matrix self, unsigned int j, matrix A, unsigned int i)"""
        return _ndlml.matrix_dotMultiplyColRow(self, *args)

    def dotMultiplyColCol(self, *args):
        """dotMultiplyColCol(matrix self, unsigned int j, matrix A, unsigned int k)"""
        return _ndlml.matrix_dotMultiplyColCol(self, *args)

    def dotDivide(self, *args):
        """dotDivide(matrix self, matrix A)"""
        return _ndlml.matrix_dotDivide(self, *args)

    def dotDivideRowRow(self, *args):
        """dotDivideRowRow(matrix self, unsigned int i, matrix A, unsigned int k)"""
        return _ndlml.matrix_dotDivideRowRow(self, *args)

    def dotDivideRowCol(self, *args):
        """dotDivideRowCol(matrix self, unsigned int i, matrix A, unsigned int j)"""
        return _ndlml.matrix_dotDivideRowCol(self, *args)

    def dotDivideColRow(self, *args):
        """dotDivideColRow(matrix self, unsigned int j, matrix A, unsigned int i)"""
        return _ndlml.matrix_dotDivideColRow(self, *args)

    def dotDivideColCol(self, *args):
        """dotDivideColCol(matrix self, unsigned int j, matrix A, unsigned int k)"""
        return _ndlml.matrix_dotDivideColCol(self, *args)

    def invElements(self):
        """invElements(matrix self)"""
        return _ndlml.matrix_invElements(self)

    def exp(self):
        """exp(matrix self)"""
        return _ndlml.matrix_exp(self)

    def tanh(self):
        """tanh(matrix self)"""
        return _ndlml.matrix_tanh(self)

    def sigmoid(self):
        """sigmoid(matrix self)"""
        return _ndlml.matrix_sigmoid(self)

    def cumGaussian(self):
        """cumGaussian(matrix self)"""
        return _ndlml.matrix_cumGaussian(self)

    def sign(self):
        """sign(matrix self)"""
        return _ndlml.matrix_sign(self)

    def log(self):
        """log(matrix self)"""
        return _ndlml.matrix_log(self)

    def sysv(self, *args):
        """
        sysv(matrix self, matrix A, char const * uplo, int lwork=0) -> int
        sysv(matrix self, matrix A, char const * uplo) -> int
        """
        return _ndlml.matrix_sysv(self, *args)

    def syev(self, *args):
        """
        syev(matrix self, matrix eigVals, char const * jobz="n", char const * uplo="u", int lwork=0) -> int
        syev(matrix self, matrix eigVals, char const * jobz="n", char const * uplo="u") -> int
        syev(matrix self, matrix eigVals, char const * jobz="n") -> int
        syev(matrix self, matrix eigVals) -> int
        """
        return _ndlml.matrix_syev(self, *args)

    def lu(self):
        """lu(matrix self)"""
        return _ndlml.matrix_lu(self)

    def inv(self):
        """inv(matrix self)"""
        return _ndlml.matrix_inv(self)

    def chol(self, *args):
        """
        chol(matrix self)
        chol(matrix self, char const * uplo)
        """
        return _ndlml.matrix_chol(self, *args)

    def jitChol(self, *args):
        """
        jitChol(matrix self, matrix A, unsigned int maxTries=20) -> double
        jitChol(matrix self, matrix A) -> double
        """
        return _ndlml.matrix_jitChol(self, *args)

    def pdinv(self, *args):
        """
        pdinv(matrix self, matrix U)
        pdinv(matrix self)
        """
        return _ndlml.matrix_pdinv(self, *args)

    def potrf(self, *args):
        """potrf(matrix self, char const * type)"""
        return _ndlml.matrix_potrf(self, *args)

    def potri(self, *args):
        """potri(matrix self, char const * type)"""
        return _ndlml.matrix_potri(self, *args)

    def gemv(self, *args):
        """gemv(matrix self, matrix A, matrix x, double alpha, double beta, char const * trans)"""
        return _ndlml.matrix_gemv(self, *args)

    def gemvRowRow(self, *args):
        """gemvRowRow(matrix self, unsigned int i, matrix A, matrix x, unsigned int k, double alpha, double beta, char const * trans)"""
        return _ndlml.matrix_gemvRowRow(self, *args)

    def gemvRowCol(self, *args):
        """gemvRowCol(matrix self, unsigned int i, matrix A, matrix x, unsigned int j, double alpha, double beta, char const * trans)"""
        return _ndlml.matrix_gemvRowCol(self, *args)

    def gemvColCol(self, *args):
        """gemvColCol(matrix self, unsigned int j, matrix A, matrix x, unsigned int k, double alpha, double beta, char const * trans)"""
        return _ndlml.matrix_gemvColCol(self, *args)

    def gemvColRow(self, *args):
        """gemvColRow(matrix self, unsigned int j, matrix A, matrix x, unsigned int i, double alpha, double beta, char const * trans)"""
        return _ndlml.matrix_gemvColRow(self, *args)

    def symm(self, *args):
        """symm(matrix self, matrix A, matrix B, double alpha, double beta, char const * upperLower, char const * side)"""
        return _ndlml.matrix_symm(self, *args)

    def symv(self, *args):
        """symv(matrix self, matrix A, matrix x, double alpha, double beta, char const * upperOrLower)"""
        return _ndlml.matrix_symv(self, *args)

    def symvRowRow(self, *args):
        """symvRowRow(matrix self, unsigned int i, matrix A, matrix x, unsigned int k, double alpha, double beta, char const * upperOrLower)"""
        return _ndlml.matrix_symvRowRow(self, *args)

    def symvRowCol(self, *args):
        """symvRowCol(matrix self, unsigned int i, matrix A, matrix x, unsigned int j, double alpha, double beta, char const * upperOrLower)"""
        return _ndlml.matrix_symvRowCol(self, *args)

    def symvColCol(self, *args):
        """symvColCol(matrix self, unsigned int j, matrix A, matrix x, unsigned int k, double alpha, double beta, char const * upperOrLower)"""
        return _ndlml.matrix_symvColCol(self, *args)

    def symvColRow(self, *args):
        """symvColRow(matrix self, unsigned int j, matrix A, matrix x, unsigned int i, double alpha, double beta, char const * upperOrLower)"""
        return _ndlml.matrix_symvColRow(self, *args)

    def symvColColOff(self, *args):
        """
        symvColColOff(matrix self, unsigned int j, int yr1, matrix A, matrix x, unsigned int k, int xr1, double alpha, 
            double beta, char const * upperLower)
        """
        return _ndlml.matrix_symvColColOff(self, *args)

    def gemm(self, *args):
        """gemm(matrix self, matrix A, matrix B, double alpha, double beta, char const * transa, char const * transb)"""
        return _ndlml.matrix_gemm(self, *args)

    def syrk(self, *args):
        """syrk(matrix self, matrix A, double alpha, double beta, char const * type, char const * trans)"""
        return _ndlml.matrix_syrk(self, *args)

    def trmm(self, *args):
        """
        trmm(matrix self, matrix B, double alpha, char const * side, char const * type, char const * trans, 
            char const * diag)
        """
        return _ndlml.matrix_trmm(self, *args)

    def trsm(self, *args):
        """
        trsm(matrix self, matrix B, double alpha, char const * side, char const * type, char const * trans, 
            char const * diag)
        """
        return _ndlml.matrix_trsm(self, *args)

    def toUnheadedFile(self, *args):
        """
        toUnheadedFile(matrix self, std::string const fileName, std::string const comment="")
        toUnheadedFile(matrix self, std::string const fileName)
        """
        return _ndlml.matrix_toUnheadedFile(self, *args)

    def toUnheadedStream(self, *args):
        """toUnheadedStream(matrix self, ostream & out)"""
        return _ndlml.matrix_toUnheadedStream(self, *args)

    def fromUnheadedFile(self, *args):
        """fromUnheadedFile(matrix self, std::string const fileName)"""
        return _ndlml.matrix_fromUnheadedFile(self, *args)

    def fromUnheadedStream(self, *args):
        """fromUnheadedStream(matrix self, istream & _in)"""
        return _ndlml.matrix_fromUnheadedStream(self, *args)

    def writeParamsToStream(self, *args):
        """writeParamsToStream(matrix self, ostream & out)"""
        return _ndlml.matrix_writeParamsToStream(self, *args)

    def readParamsFromStream(self, *args):
        """readParamsFromStream(matrix self, istream & out)"""
        return _ndlml.matrix_readParamsFromStream(self, *args)

    def toArray(self, *args):
        """
        toArray(matrix self, double * outVals)
        toArray(matrix self, double * outVals, int numRows, int numCols)
        """
        return _ndlml.matrix_toArray(self, *args)

    def toSingleArray(self, *args):
        """toSingleArray(matrix self, double * outVals, int numElements)"""
        return _ndlml.matrix_toSingleArray(self, *args)

    def fromArray(self, *args):
        """fromArray(matrix self, double * inVals)"""
        return _ndlml.matrix_fromArray(self, *args)

    def rand(self, *args):
        """
        rand(matrix self, double a, double b)
        rand(matrix self)
        """
        return _ndlml.matrix_rand(self, *args)

    def randn(self, *args):
        """
        randn(matrix self, double var, double mean)
        randn(matrix self)
        """
        return _ndlml.matrix_randn(self, *args)

    def zeros(self):
        """zeros(matrix self)"""
        return _ndlml.matrix_zeros(self)

    def ones(self):
        """ones(matrix self)"""
        return _ndlml.matrix_ones(self)

    def diag(self, *args):
        """
        diag(matrix self, matrix d)
        diag(matrix self, double d)
        """
        return _ndlml.matrix_diag(self, *args)

    def eye(self):
        """eye(matrix self)"""
        return _ndlml.matrix_eye(self)

    def negate(self):
        """negate(matrix self)"""
        return _ndlml.matrix_negate(self)

    def sum(self):
        """sum(matrix self) -> double"""
        return _ndlml.matrix_sum(self)

    def trace(self):
        """trace(matrix self) -> double"""
        return _ndlml.matrix_trace(self)

    def equals(self, *args):
        """
        equals(matrix self, matrix A, double tol=ndlutil::MATCHTOL) -> bool
        equals(matrix self, matrix A) -> bool
        """
        return _ndlml.matrix_equals(self, *args)

    def maxAbsDiff(self, *args):
        """maxAbsDiff(matrix self, matrix X) -> double"""
        return _ndlml.matrix_maxAbsDiff(self, *args)

    def max(self):
        """max(matrix self) -> double"""
        return _ndlml.matrix_max(self)

    def minRow(self, *args):
        """minRow(matrix self, matrix m)"""
        return _ndlml.matrix_minRow(self, *args)

    def maxRow(self, *args):
        """maxRow(matrix self, matrix m)"""
        return _ndlml.matrix_maxRow(self, *args)

    def getType(self):
        """getType(matrix self) -> std::string"""
        return _ndlml.matrix_getType(self)

    def getBaseType(self):
        """getBaseType(matrix self) -> std::string"""
        return _ndlml.matrix_getBaseType(self)

    def resize(self, *args):
        """resize(matrix self, unsigned int rows, unsigned int cols)"""
        return _ndlml.matrix_resize(self, *args)

    def copy(self, *args):
        """copy(matrix self, matrix x)"""
        return _ndlml.matrix_copy(self, *args)

    def toarray(self): return _ndlml.matrix_toarray(self)
    def tolist(self): return _ndlml.matrix_tolist(self)
    def fromarray(self, *args): return _ndlml.matrix_fromarray(self, *args)
    def __eq__(self, *args): return _ndlml.matrix___eq__(self, *args)
    def __str__(self): return _ndlml.matrix___str__(self)
    def __getitem__(self, *args): return _ndlml.matrix___getitem__(self, *args)
matrix_swigregister = _ndlml.matrix_swigregister
matrix_swigregister(matrix)


def zeros(*args):
  """zeros(int const rows, int const cols) -> matrix"""
  return _ndlml.zeros(*args)

def randn(*args):
  """
    randn(double mean, double var) -> double
    randn() -> double
    """
  return _ndlml.randn(*args)

def max(*args):
  """max(matrix A) -> double"""
  return _ndlml.max(*args)

def lu(*args):
  """lu(matrix inMatrix) -> matrix"""
  return _ndlml.lu(*args)

def chol(*args):
  """
    chol(matrix inMatrix) -> matrix
    chol(matrix outMatrix, matrix inMatrix)
    """
  return _ndlml.chol(*args)

def jitChol(*args):
  """
    jitChol(matrix inMatrix, unsigned int maxTries) -> matrix
    jitChol(matrix outMatrix, matrix inMatrix, unsigned int maxTries) -> double
    """
  return _ndlml.jitChol(*args)

def inv(*args):
  """inv(matrix inMatrix) -> matrix"""
  return _ndlml.inv(*args)

def multiply(*args):
  """
    multiply(matrix A, matrix B) -> matrix
    multiply(matrix A, char const * transa, matrix B, char const * transb) -> matrix
    """
  return _ndlml.multiply(*args)

def trace(*args):
  """trace(matrix A) -> double"""
  return _ndlml.trace(*args)

def sum(*args):
  """sum(matrix A) -> double"""
  return _ndlml.sum(*args)

def pdinv(*args):
  """pdinv(matrix A) -> matrix"""
  return _ndlml.pdinv(*args)

def sumRow(*args):
  """sumRow(matrix arg1) -> matrix"""
  return _ndlml.sumRow(*args)

def meanRow(*args):
  """meanRow(matrix arg1) -> matrix"""
  return _ndlml.meanRow(*args)

def varRow(*args):
  """varRow(matrix arg1) -> matrix"""
  return _ndlml.varRow(*args)

def stdRow(*args):
  """stdRow(matrix arg1) -> matrix"""
  return _ndlml.stdRow(*args)

def sumCol(*args):
  """sumCol(matrix arg1) -> matrix"""
  return _ndlml.sumCol(*args)

def meanCol(*args):
  """meanCol(matrix arg1) -> matrix"""
  return _ndlml.meanCol(*args)

def varCol(*args):
  """varCol(matrix arg1) -> matrix"""
  return _ndlml.varCol(*args)

def stdCol(*args):
  """stdCol(matrix arg1) -> matrix"""
  return _ndlml.stdCol(*args)

def logDet(*args):
  """logDet(matrix U) -> double"""
  return _ndlml.logDet(*args)
class CTransform:
    """Proxy of C++ CTransform class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTransform, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CTransform, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ndlml.delete_CTransform
    __del__ = lambda self : None;
    def clone(self):
        """clone(CTransform self) -> CTransform"""
        return _ndlml.CTransform_clone(self)

    def atox(self, *args):
        """atox(CTransform self, double x) -> double"""
        return _ndlml.CTransform_atox(self, *args)

    def xtoa(self, *args):
        """xtoa(CTransform self, double x) -> double"""
        return _ndlml.CTransform_xtoa(self, *args)

    def gradfact(self, *args):
        """gradfact(CTransform self, double x) -> double"""
        return _ndlml.CTransform_gradfact(self, *args)

    def setType(self, *args):
        """setType(CTransform self, std::string const name)"""
        return _ndlml.CTransform_setType(self, *args)

    def getType(self):
        """getType(CTransform self) -> std::string"""
        return _ndlml.CTransform_getType(self)

    __swig_getmethods__["defaultPositive"] = lambda x: _ndlml.CTransform_defaultPositive
    __swig_getmethods__["defaultZeroOne"] = lambda x: _ndlml.CTransform_defaultZeroOne
    __swig_getmethods__["getNewTransformPointer"] = lambda x: _ndlml.CTransform_getNewTransformPointer
CTransform_swigregister = _ndlml.CTransform_swigregister
CTransform_swigregister(CTransform)
limVal = cvar.limVal

def CTransform_defaultPositive():
  """CTransform_defaultPositive() -> CTransform"""
  return _ndlml.CTransform_defaultPositive()

def CTransform_defaultZeroOne():
  """CTransform_defaultZeroOne() -> CTransform"""
  return _ndlml.CTransform_defaultZeroOne()

def CTransform_getNewTransformPointer(*args):
  """CTransform_getNewTransformPointer(std::string const transformType) -> CTransform"""
  return _ndlml.CTransform_getNewTransformPointer(*args)

class CExpTransform(CTransform):
    """Proxy of C++ CExpTransform class"""
    __swig_setmethods__ = {}
    for _s in [CTransform]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CExpTransform, name, value)
    __swig_getmethods__ = {}
    for _s in [CTransform]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CExpTransform, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(CExpTransform self) -> CExpTransform
        __init__(CExpTransform self, CExpTransform rhs) -> CExpTransform
        """
        this = _ndlml.new_CExpTransform(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """clone(CExpTransform self) -> CTransform"""
        return _ndlml.CExpTransform_clone(self)

    def atox(self, *args):
        """atox(CExpTransform self, double a) -> double"""
        return _ndlml.CExpTransform_atox(self, *args)

    def xtoa(self, *args):
        """xtoa(CExpTransform self, double x) -> double"""
        return _ndlml.CExpTransform_xtoa(self, *args)

    def gradfact(self, *args):
        """gradfact(CExpTransform self, double x) -> double"""
        return _ndlml.CExpTransform_gradfact(self, *args)

    __swig_destroy__ = _ndlml.delete_CExpTransform
    __del__ = lambda self : None;
CExpTransform_swigregister = _ndlml.CExpTransform_swigregister
CExpTransform_swigregister(CExpTransform)

class CNegLogLogitTransform(CTransform):
    """Proxy of C++ CNegLogLogitTransform class"""
    __swig_setmethods__ = {}
    for _s in [CTransform]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CNegLogLogitTransform, name, value)
    __swig_getmethods__ = {}
    for _s in [CTransform]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CNegLogLogitTransform, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(CNegLogLogitTransform self) -> CNegLogLogitTransform
        __init__(CNegLogLogitTransform self, CNegLogLogitTransform rhs) -> CNegLogLogitTransform
        """
        this = _ndlml.new_CNegLogLogitTransform(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """clone(CNegLogLogitTransform self) -> CTransform"""
        return _ndlml.CNegLogLogitTransform_clone(self)

    def atox(self, *args):
        """atox(CNegLogLogitTransform self, double a) -> double"""
        return _ndlml.CNegLogLogitTransform_atox(self, *args)

    def xtoa(self, *args):
        """xtoa(CNegLogLogitTransform self, double x) -> double"""
        return _ndlml.CNegLogLogitTransform_xtoa(self, *args)

    def gradfact(self, *args):
        """gradfact(CNegLogLogitTransform self, double x) -> double"""
        return _ndlml.CNegLogLogitTransform_gradfact(self, *args)

    __swig_destroy__ = _ndlml.delete_CNegLogLogitTransform
    __del__ = lambda self : None;
CNegLogLogitTransform_swigregister = _ndlml.CNegLogLogitTransform_swigregister
CNegLogLogitTransform_swigregister(CNegLogLogitTransform)

class CLinearTransform(CTransform):
    """Proxy of C++ CLinearTransform class"""
    __swig_setmethods__ = {}
    for _s in [CTransform]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLinearTransform, name, value)
    __swig_getmethods__ = {}
    for _s in [CTransform]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CLinearTransform, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(CLinearTransform self) -> CLinearTransform
        __init__(CLinearTransform self, CLinearTransform rhs) -> CLinearTransform
        """
        this = _ndlml.new_CLinearTransform(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """clone(CLinearTransform self) -> CTransform"""
        return _ndlml.CLinearTransform_clone(self)

    def atox(self, *args):
        """atox(CLinearTransform self, double a) -> double"""
        return _ndlml.CLinearTransform_atox(self, *args)

    def xtoa(self, *args):
        """xtoa(CLinearTransform self, double x) -> double"""
        return _ndlml.CLinearTransform_xtoa(self, *args)

    def gradfact(self, *args):
        """gradfact(CLinearTransform self, double x) -> double"""
        return _ndlml.CLinearTransform_gradfact(self, *args)

    def setM(self, *args):
        """setM(CLinearTransform self, double val)"""
        return _ndlml.CLinearTransform_setM(self, *args)

    def getM(self):
        """getM(CLinearTransform self) -> double"""
        return _ndlml.CLinearTransform_getM(self)

    def setC(self, *args):
        """setC(CLinearTransform self, double val)"""
        return _ndlml.CLinearTransform_setC(self, *args)

    def getC(self):
        """getC(CLinearTransform self) -> double"""
        return _ndlml.CLinearTransform_getC(self)

    __swig_destroy__ = _ndlml.delete_CLinearTransform
    __del__ = lambda self : None;
CLinearTransform_swigregister = _ndlml.CLinearTransform_swigregister
CLinearTransform_swigregister(CLinearTransform)

class CSigmoidTransform(CTransform):
    """Proxy of C++ CSigmoidTransform class"""
    __swig_setmethods__ = {}
    for _s in [CTransform]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CSigmoidTransform, name, value)
    __swig_getmethods__ = {}
    for _s in [CTransform]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CSigmoidTransform, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(CSigmoidTransform self) -> CSigmoidTransform
        __init__(CSigmoidTransform self, CSigmoidTransform rhs) -> CSigmoidTransform
        """
        this = _ndlml.new_CSigmoidTransform(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """clone(CSigmoidTransform self) -> CTransform"""
        return _ndlml.CSigmoidTransform_clone(self)

    def atox(self, *args):
        """atox(CSigmoidTransform self, double a) -> double"""
        return _ndlml.CSigmoidTransform_atox(self, *args)

    def xtoa(self, *args):
        """xtoa(CSigmoidTransform self, double x) -> double"""
        return _ndlml.CSigmoidTransform_xtoa(self, *args)

    def gradfact(self, *args):
        """gradfact(CSigmoidTransform self, double x) -> double"""
        return _ndlml.CSigmoidTransform_gradfact(self, *args)

    __swig_destroy__ = _ndlml.delete_CSigmoidTransform
    __del__ = lambda self : None;
CSigmoidTransform_swigregister = _ndlml.CSigmoidTransform_swigregister
CSigmoidTransform_swigregister(CSigmoidTransform)

class CParamTransforms(CMatInterface,CStreamInterface):
    """Proxy of C++ CParamTransforms class"""
    __swig_setmethods__ = {}
    for _s in [CMatInterface,CStreamInterface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CParamTransforms, name, value)
    __swig_getmethods__ = {}
    for _s in [CMatInterface,CStreamInterface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CParamTransforms, name)
    __repr__ = _swig_repr
    def getType(self):
        """getType(CParamTransforms self) -> std::string"""
        return _ndlml.CParamTransforms_getType(self)

    def getBaseType(self):
        """getBaseType(CParamTransforms self) -> std::string"""
        return _ndlml.CParamTransforms_getBaseType(self)

    def equals(self, *args):
        """equals(CParamTransforms self, CParamTransforms transforms) -> bool"""
        return _ndlml.CParamTransforms_equals(self, *args)

    def display(self, *args):
        """display(CParamTransforms self, ostream & out)"""
        return _ndlml.CParamTransforms_display(self, *args)

    def writeParamsToStream(self, *args):
        """writeParamsToStream(CParamTransforms self, ostream & out)"""
        return _ndlml.CParamTransforms_writeParamsToStream(self, *args)

    def readParamsFromStream(self, *args):
        """readParamsFromStream(CParamTransforms self, istream & _in)"""
        return _ndlml.CParamTransforms_readParamsFromStream(self, *args)

    def addTransform(self, *args):
        """addTransform(CParamTransforms self, CTransform trans, unsigned int index)"""
        return _ndlml.CParamTransforms_addTransform(self, *args)

    def clearTransforms(self):
        """clearTransforms(CParamTransforms self)"""
        return _ndlml.CParamTransforms_clearTransforms(self)

    def getTransformType(self, *args):
        """getTransformType(CParamTransforms self, unsigned int ind) -> std::string"""
        return _ndlml.CParamTransforms_getTransformType(self, *args)

    def getTransformIndex(self, *args):
        """getTransformIndex(CParamTransforms self, unsigned int ind) -> unsigned int"""
        return _ndlml.CParamTransforms_getTransformIndex(self, *args)

    def getNumTransforms(self):
        """getNumTransforms(CParamTransforms self) -> unsigned int"""
        return _ndlml.CParamTransforms_getNumTransforms(self)

    __swig_setmethods__["transforms"] = _ndlml.CParamTransforms_transforms_set
    __swig_getmethods__["transforms"] = _ndlml.CParamTransforms_transforms_get
    __swig_setmethods__["transIndex"] = _ndlml.CParamTransforms_transIndex_set
    __swig_getmethods__["transIndex"] = _ndlml.CParamTransforms_transIndex_get
    def __init__(self): 
        """__init__(CParamTransforms self) -> CParamTransforms"""
        this = _ndlml.new_CParamTransforms()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ndlml.delete_CParamTransforms
    __del__ = lambda self : None;
CParamTransforms_swigregister = _ndlml.CParamTransforms_swigregister
CParamTransforms_swigregister(CParamTransforms)

class CTransformable:
    """Proxy of C++ CTransformable class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTransformable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CTransformable, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ndlml.delete_CTransformable
    __del__ = lambda self : None;
    def getNumParams(self):
        """getNumParams(CTransformable self) -> unsigned int"""
        return _ndlml.CTransformable_getNumParams(self)

    def getParam(self, *args):
        """getParam(CTransformable self, unsigned int paramNo) -> double"""
        return _ndlml.CTransformable_getParam(self, *args)

    def setParam(self, *args):
        """setParam(CTransformable self, double val, unsigned int paramNo)"""
        return _ndlml.CTransformable_setParam(self, *args)

    def getGradParams(self, *args):
        """getGradParams(CTransformable self, matrix g)"""
        return _ndlml.CTransformable_getGradParams(self, *args)

    def getParams(self, *args):
        """getParams(CTransformable self, matrix params)"""
        return _ndlml.CTransformable_getParams(self, *args)

    def setParams(self, *args):
        """setParams(CTransformable self, matrix params)"""
        return _ndlml.CTransformable_setParams(self, *args)

    def getTransParam(self, *args):
        """getTransParam(CTransformable self, unsigned int paramNo) -> double"""
        return _ndlml.CTransformable_getTransParam(self, *args)

    def getTransParams(self, *args):
        """getTransParams(CTransformable self, matrix transParam)"""
        return _ndlml.CTransformable_getTransParams(self, *args)

    def setTransParam(self, *args):
        """setTransParam(CTransformable self, double val, unsigned int paramNo)"""
        return _ndlml.CTransformable_setTransParam(self, *args)

    def setTransParams(self, *args):
        """setTransParams(CTransformable self, matrix transParam)"""
        return _ndlml.CTransformable_setTransParams(self, *args)

    def getGradTransParams(self, *args):
        """getGradTransParams(CTransformable self, matrix g)"""
        return _ndlml.CTransformable_getGradTransParams(self, *args)

    def getNumTransforms(self):
        """getNumTransforms(CTransformable self) -> unsigned int"""
        return _ndlml.CTransformable_getNumTransforms(self)

    def getTransform(self, *args):
        """getTransform(CTransformable self, unsigned int ind) -> CTransform"""
        return _ndlml.CTransformable_getTransform(self, *args)

    def getTransformType(self, *args):
        """getTransformType(CTransformable self, unsigned int ind) -> std::string"""
        return _ndlml.CTransformable_getTransformType(self, *args)

    def getTransformIndex(self, *args):
        """getTransformIndex(CTransformable self, unsigned int ind) -> unsigned int"""
        return _ndlml.CTransformable_getTransformIndex(self, *args)

    def getTransformGradFact(self, *args):
        """getTransformGradFact(CTransformable self, double val, unsigned int ind) -> double"""
        return _ndlml.CTransformable_getTransformGradFact(self, *args)

    def addTransform(self, *args):
        """addTransform(CTransformable self, CTransform trans, unsigned int index)"""
        return _ndlml.CTransformable_addTransform(self, *args)

    def clearTransforms(self):
        """clearTransforms(CTransformable self)"""
        return _ndlml.CTransformable_clearTransforms(self)

CTransformable_swigregister = _ndlml.CTransformable_swigregister
CTransformable_swigregister(CTransformable)

class CDataModel:
    """Proxy of C++ CDataModel class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDataModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CDataModel, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ndlml.delete_CDataModel
    __del__ = lambda self : None;
    def getType(self):
        """getType(CDataModel self) -> std::string"""
        return _ndlml.CDataModel_getType(self)

    def setType(self, *args):
        """setType(CDataModel self, std::string const name)"""
        return _ndlml.CDataModel_setType(self, *args)

    def getBaseType(self):
        """getBaseType(CDataModel self) -> std::string"""
        return _ndlml.CDataModel_getBaseType(self)

    def setBaseType(self, *args):
        """setBaseType(CDataModel self, std::string const name)"""
        return _ndlml.CDataModel_setBaseType(self, *args)

    def getName(self):
        """getName(CDataModel self) -> std::string"""
        return _ndlml.CDataModel_getName(self)

    def setName(self, *args):
        """setName(CDataModel self, std::string const name)"""
        return _ndlml.CDataModel_setName(self, *args)

    def getOptNumParams(self):
        """getOptNumParams(CDataModel self) -> unsigned int"""
        return _ndlml.CDataModel_getOptNumParams(self)

    def display(self, *args):
        """display(CDataModel self, ostream & os)"""
        return _ndlml.CDataModel_display(self, *args)

    def getNumData(self):
        """getNumData(CDataModel self) -> unsigned int"""
        return _ndlml.CDataModel_getNumData(self)

    def setNumData(self, *args):
        """setNumData(CDataModel self, unsigned int val)"""
        return _ndlml.CDataModel_setNumData(self, *args)

CDataModel_swigregister = _ndlml.CDataModel_swigregister
CDataModel_swigregister(CDataModel)

class CMapModel(CDataModel):
    """Proxy of C++ CMapModel class"""
    __swig_setmethods__ = {}
    for _s in [CDataModel]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMapModel, name, value)
    __swig_getmethods__ = {}
    for _s in [CDataModel]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CMapModel, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def out(self, *args):
        """out(CMapModel self, matrix yPred, matrix inData)"""
        return _ndlml.CMapModel_out(self, *args)

    def outGradParams(self, *args):
        """outGradParams(CMapModel self, matrix g, matrix Xin, unsigned int pointNo, unsigned int outputNo) -> double"""
        return _ndlml.CMapModel_outGradParams(self, *args)

    def outGradX(self, *args):
        """outGradX(CMapModel self, matrix g, matrix Xin, unsigned int pointNo, unsigned int outputNo) -> double"""
        return _ndlml.CMapModel_outGradX(self, *args)

    def setInputDim(self, *args):
        """setInputDim(CMapModel self, unsigned int dim)"""
        return _ndlml.CMapModel_setInputDim(self, *args)

    def getInputDim(self):
        """getInputDim(CMapModel self) -> unsigned int"""
        return _ndlml.CMapModel_getInputDim(self)

    def setOutputDim(self, *args):
        """setOutputDim(CMapModel self, unsigned int dim)"""
        return _ndlml.CMapModel_setOutputDim(self, *args)

    def getOutputDim(self):
        """getOutputDim(CMapModel self) -> unsigned int"""
        return _ndlml.CMapModel_getOutputDim(self)

    __swig_destroy__ = _ndlml.delete_CMapModel
    __del__ = lambda self : None;
CMapModel_swigregister = _ndlml.CMapModel_swigregister
CMapModel_swigregister(CMapModel)


def writeMapModelToStream(*args):
  """writeMapModelToStream(CMapModel model, ostream & out)"""
  return _ndlml.writeMapModelToStream(*args)

def readMapModelFromStream(*args):
  """readMapModelFromStream(istream & _in) -> CMapModel"""
  return _ndlml.readMapModelFromStream(*args)
class COptimisable:
    """Proxy of C++ COptimisable class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, COptimisable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, COptimisable, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    CG = _ndlml.COptimisable_CG
    SCG = _ndlml.COptimisable_SCG
    GD = _ndlml.COptimisable_GD
    BFGS = _ndlml.COptimisable_BFGS
    LBFGS = _ndlml.COptimisable_LBFGS
    __swig_destroy__ = _ndlml.delete_COptimisable
    __del__ = lambda self : None;
    def setVerbosity(self, *args):
        """setVerbosity(COptimisable self, int val)"""
        return _ndlml.COptimisable_setVerbosity(self, *args)

    def getVerbosity(self):
        """getVerbosity(COptimisable self) -> int"""
        return _ndlml.COptimisable_getVerbosity(self)

    def getOptNumParams(self):
        """getOptNumParams(COptimisable self) -> unsigned int"""
        return _ndlml.COptimisable_getOptNumParams(self)

    def getOptParams(self, *args):
        """getOptParams(COptimisable self, matrix param)"""
        return _ndlml.COptimisable_getOptParams(self, *args)

    def setOptParams(self, *args):
        """setOptParams(COptimisable self, matrix param)"""
        return _ndlml.COptimisable_setOptParams(self, *args)

    def computeObjectiveGradParams(self, *args):
        """computeObjectiveGradParams(COptimisable self, matrix g) -> double"""
        return _ndlml.COptimisable_computeObjectiveGradParams(self, *args)

    def computeObjectiveVal(self):
        """computeObjectiveVal(COptimisable self) -> double"""
        return _ndlml.COptimisable_computeObjectiveVal(self)

    def setDirection(self, *args):
        """setDirection(COptimisable self, matrix vals)"""
        return _ndlml.COptimisable_setDirection(self, *args)

    def getDirection(self, *args):
        """getDirection(COptimisable self, matrix vals)"""
        return _ndlml.COptimisable_getDirection(self, *args)

    def checkGradients(self):
        """checkGradients(COptimisable self)"""
        return _ndlml.COptimisable_checkGradients(self)

    def gdOptimise(self):
        """gdOptimise(COptimisable self)"""
        return _ndlml.COptimisable_gdOptimise(self)

    def gdPullbackOptimise(self):
        """gdPullbackOptimise(COptimisable self)"""
        return _ndlml.COptimisable_gdPullbackOptimise(self)

    def lbfgsOptimise(self):
        """lbfgsOptimise(COptimisable self)"""
        return _ndlml.COptimisable_lbfgsOptimise(self)

    def scgOptimise(self):
        """scgOptimise(COptimisable self)"""
        return _ndlml.COptimisable_scgOptimise(self)

    def cgOptimise(self):
        """cgOptimise(COptimisable self)"""
        return _ndlml.COptimisable_cgOptimise(self)

    def oneDObjectiveVal(self, *args):
        """oneDObjectiveVal(COptimisable self, double val) -> double"""
        return _ndlml.COptimisable_oneDObjectiveVal(self, *args)

    def setLearnRate(self, *args):
        """setLearnRate(COptimisable self, double val)"""
        return _ndlml.COptimisable_setLearnRate(self, *args)

    def getLearnRate(self):
        """getLearnRate(COptimisable self) -> double"""
        return _ndlml.COptimisable_getLearnRate(self)

    def setMomentum(self, *args):
        """setMomentum(COptimisable self, double val)"""
        return _ndlml.COptimisable_setMomentum(self, *args)

    def getMomentum(self):
        """getMomentum(COptimisable self) -> double"""
        return _ndlml.COptimisable_getMomentum(self)

    def setFuncEvalTerminate(self, *args):
        """setFuncEvalTerminate(COptimisable self, bool val)"""
        return _ndlml.COptimisable_setFuncEvalTerminate(self, *args)

    def isFuncEvalTerminate(self):
        """isFuncEvalTerminate(COptimisable self) -> bool"""
        return _ndlml.COptimisable_isFuncEvalTerminate(self)

    def setIterTerminate(self, *args):
        """setIterTerminate(COptimisable self, bool val)"""
        return _ndlml.COptimisable_setIterTerminate(self, *args)

    def isIterTerminate(self):
        """isIterTerminate(COptimisable self) -> bool"""
        return _ndlml.COptimisable_isIterTerminate(self)

    def setMaxFuncEvals(self, *args):
        """setMaxFuncEvals(COptimisable self, unsigned int val)"""
        return _ndlml.COptimisable_setMaxFuncEvals(self, *args)

    def getMaxFuncEvals(self):
        """getMaxFuncEvals(COptimisable self) -> unsigned int"""
        return _ndlml.COptimisable_getMaxFuncEvals(self)

    def setMaxIters(self, *args):
        """setMaxIters(COptimisable self, unsigned int val)"""
        return _ndlml.COptimisable_setMaxIters(self, *args)

    def getMaxIters(self):
        """getMaxIters(COptimisable self) -> unsigned int"""
        return _ndlml.COptimisable_getMaxIters(self)

    def setObjectiveTol(self, *args):
        """setObjectiveTol(COptimisable self, double val)"""
        return _ndlml.COptimisable_setObjectiveTol(self, *args)

    def getObjectiveTol(self):
        """getObjectiveTol(COptimisable self) -> double"""
        return _ndlml.COptimisable_getObjectiveTol(self)

    def setParamTol(self, *args):
        """setParamTol(COptimisable self, double val)"""
        return _ndlml.COptimisable_setParamTol(self, *args)

    def getParamTol(self):
        """getParamTol(COptimisable self) -> double"""
        return _ndlml.COptimisable_getParamTol(self)

    def setDefaultOptimiser(self, *args):
        """setDefaultOptimiser(COptimisable self, int val)"""
        return _ndlml.COptimisable_setDefaultOptimiser(self, *args)

    def getDefaultOptimiser(self):
        """getDefaultOptimiser(COptimisable self) -> int"""
        return _ndlml.COptimisable_getDefaultOptimiser(self)

    def setDefaultOptimiserStr(self, *args):
        """setDefaultOptimiserStr(COptimisable self, std::string val)"""
        return _ndlml.COptimisable_setDefaultOptimiserStr(self, *args)

    def getDefaultOptimiserStr(self):
        """getDefaultOptimiserStr(COptimisable self) -> std::string"""
        return _ndlml.COptimisable_getDefaultOptimiserStr(self)

    def runDefaultOptimiser(self):
        """runDefaultOptimiser(COptimisable self)"""
        return _ndlml.COptimisable_runDefaultOptimiser(self)

COptimisable_swigregister = _ndlml.COptimisable_swigregister
COptimisable_swigregister(COptimisable)

class CProbabilisticOptimisable(COptimisable):
    """Proxy of C++ CProbabilisticOptimisable class"""
    __swig_setmethods__ = {}
    for _s in [COptimisable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CProbabilisticOptimisable, name, value)
    __swig_getmethods__ = {}
    for _s in [COptimisable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CProbabilisticOptimisable, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def logLikelihood(self):
        """logLikelihood(CProbabilisticOptimisable self) -> double"""
        return _ndlml.CProbabilisticOptimisable_logLikelihood(self)

    def logLikelihoodGradient(self, *args):
        """logLikelihoodGradient(CProbabilisticOptimisable self, matrix g) -> double"""
        return _ndlml.CProbabilisticOptimisable_logLikelihoodGradient(self, *args)

    def computeObjectiveGradParams(self, *args):
        """computeObjectiveGradParams(CProbabilisticOptimisable self, matrix g) -> double"""
        return _ndlml.CProbabilisticOptimisable_computeObjectiveGradParams(self, *args)

    def computeObjectiveVal(self):
        """computeObjectiveVal(CProbabilisticOptimisable self) -> double"""
        return _ndlml.CProbabilisticOptimisable_computeObjectiveVal(self)

    __swig_destroy__ = _ndlml.delete_CProbabilisticOptimisable
    __del__ = lambda self : None;
CProbabilisticOptimisable_swigregister = _ndlml.CProbabilisticOptimisable_swigregister
CProbabilisticOptimisable_swigregister(CProbabilisticOptimisable)

class CDist(CMatInterface,CStreamInterface,CTransformable):
    """Proxy of C++ CDist class"""
    __swig_setmethods__ = {}
    for _s in [CMatInterface,CStreamInterface,CTransformable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDist, name, value)
    __swig_getmethods__ = {}
    for _s in [CMatInterface,CStreamInterface,CTransformable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CDist, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ndlml.delete_CDist
    __del__ = lambda self : None;
    def getNumParams(self):
        """getNumParams(CDist self) -> unsigned int"""
        return _ndlml.CDist_getNumParams(self)

    def setNumParams(self, *args):
        """setNumParams(CDist self, unsigned int num)"""
        return _ndlml.CDist_setNumParams(self, *args)

    def getParam(self, *args):
        """getParam(CDist self, unsigned int paramNo) -> double"""
        return _ndlml.CDist_getParam(self, *args)

    def setParam(self, *args):
        """setParam(CDist self, double val, unsigned int paramNo)"""
        return _ndlml.CDist_setParam(self, *args)

    def getGradParams(self, *args):
        """getGradParams(CDist self, matrix g)"""
        return _ndlml.CDist_getGradParams(self, *args)

    def getBaseType(self):
        """getBaseType(CDist self) -> std::string"""
        return _ndlml.CDist_getBaseType(self)

    def equals(self, *args):
        """
        equals(CDist self, CDist dist, double tol=ndlutil::MATCHTOL) -> bool
        equals(CDist self, CDist dist) -> bool
        """
        return _ndlml.CDist_equals(self, *args)

    def writeParamsToStream(self, *args):
        """writeParamsToStream(CDist self, ostream & out)"""
        return _ndlml.CDist_writeParamsToStream(self, *args)

    def readParamsFromStream(self, *args):
        """readParamsFromStream(CDist self, istream & _in)"""
        return _ndlml.CDist_readParamsFromStream(self, *args)

    def getGradInput(self, *args):
        """getGradInput(CDist self, double x) -> double"""
        return _ndlml.CDist_getGradInput(self, *args)

    def getGradInputs(self, *args):
        """getGradInputs(CDist self, matrix g, matrix x)"""
        return _ndlml.CDist_getGradInputs(self, *args)

    def setInitParam(self):
        """setInitParam(CDist self)"""
        return _ndlml.CDist_setInitParam(self)

    def logProb(self, *args):
        """
        logProb(CDist self, double val) -> double
        logProb(CDist self, matrix x) -> double
        """
        return _ndlml.CDist_logProb(self, *args)

    def setParamName(self, *args):
        """setParamName(CDist self, std::string const name, unsigned int index)"""
        return _ndlml.CDist_setParamName(self, *args)

    def getParamName(self, *args):
        """getParamName(CDist self, unsigned int index) -> std::string"""
        return _ndlml.CDist_getParamName(self, *args)

    def setType(self, *args):
        """setType(CDist self, std::string name)"""
        return _ndlml.CDist_setType(self, *args)

    def getType(self):
        """getType(CDist self) -> std::string"""
        return _ndlml.CDist_getType(self)

    def setName(self, *args):
        """setName(CDist self, std::string name)"""
        return _ndlml.CDist_setName(self, *args)

    def getName(self):
        """getName(CDist self) -> std::string"""
        return _ndlml.CDist_getName(self)

CDist_swigregister = _ndlml.CDist_swigregister
CDist_swigregister(CDist)
DISTVERSION = cvar.DISTVERSION


def writeDistToStream(*args):
  """writeDistToStream(CDist dist, ostream & out)"""
  return _ndlml.writeDistToStream(*args)

def readDistFromStream(*args):
  """readDistFromStream(istream & _in) -> CDist"""
  return _ndlml.readDistFromStream(*args)
class gaussianDist(CDist):
    """Proxy of C++ CGaussianDist class"""
    __swig_setmethods__ = {}
    for _s in [CDist]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, gaussianDist, name, value)
    __swig_getmethods__ = {}
    for _s in [CDist]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, gaussianDist, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(CGaussianDist self) -> gaussianDist
        __init__(CGaussianDist self, gaussianDist arg2) -> gaussianDist
        """
        this = _ndlml.new_gaussianDist(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ndlml.delete_gaussianDist
    __del__ = lambda self : None;
    def clone(self):
        """clone(gaussianDist self) -> gaussianDist"""
        return _ndlml.gaussianDist_clone(self)

    def getParam(self, *args):
        """getParam(gaussianDist self, unsigned int paramNo) -> double"""
        return _ndlml.gaussianDist_getParam(self, *args)

    def setParam(self, *args):
        """setParam(gaussianDist self, double val, unsigned int paramNo)"""
        return _ndlml.gaussianDist_setParam(self, *args)

    def getGradInput(self, *args):
        """getGradInput(gaussianDist self, double x) -> double"""
        return _ndlml.gaussianDist_getGradInput(self, *args)

    def setInitParam(self):
        """setInitParam(gaussianDist self)"""
        return _ndlml.gaussianDist_setInitParam(self)

    def logProb(self, *args):
        """logProb(gaussianDist self, double val) -> double"""
        return _ndlml.gaussianDist_logProb(self, *args)

gaussianDist_swigregister = _ndlml.gaussianDist_swigregister
gaussianDist_swigregister(gaussianDist)

class gammaDist(CDist):
    """Proxy of C++ CGammaDist class"""
    __swig_setmethods__ = {}
    for _s in [CDist]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, gammaDist, name, value)
    __swig_getmethods__ = {}
    for _s in [CDist]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, gammaDist, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(CGammaDist self) -> gammaDist
        __init__(CGammaDist self, gammaDist arg2) -> gammaDist
        """
        this = _ndlml.new_gammaDist(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ndlml.delete_gammaDist
    __del__ = lambda self : None;
    def clone(self):
        """clone(gammaDist self) -> gammaDist"""
        return _ndlml.gammaDist_clone(self)

    def getParam(self, *args):
        """getParam(gammaDist self, unsigned int paramNo) -> double"""
        return _ndlml.gammaDist_getParam(self, *args)

    def setParam(self, *args):
        """setParam(gammaDist self, double val, unsigned int paramNo)"""
        return _ndlml.gammaDist_setParam(self, *args)

    def getGradInput(self, *args):
        """getGradInput(gammaDist self, double x) -> double"""
        return _ndlml.gammaDist_getGradInput(self, *args)

    def setInitParam(self):
        """setInitParam(gammaDist self)"""
        return _ndlml.gammaDist_setInitParam(self)

    def logProb(self, *args):
        """logProb(gammaDist self, double val) -> double"""
        return _ndlml.gammaDist_logProb(self, *args)

gammaDist_swigregister = _ndlml.gammaDist_swigregister
gammaDist_swigregister(gammaDist)

class wangDist(CDist):
    """Proxy of C++ CWangDist class"""
    __swig_setmethods__ = {}
    for _s in [CDist]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, wangDist, name, value)
    __swig_getmethods__ = {}
    for _s in [CDist]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, wangDist, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(CWangDist self) -> wangDist
        __init__(CWangDist self, wangDist arg2) -> wangDist
        """
        this = _ndlml.new_wangDist(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ndlml.delete_wangDist
    __del__ = lambda self : None;
    def clone(self):
        """clone(wangDist self) -> wangDist"""
        return _ndlml.wangDist_clone(self)

    def getParam(self, *args):
        """getParam(wangDist self, unsigned int paramNo) -> double"""
        return _ndlml.wangDist_getParam(self, *args)

    def setParam(self, *args):
        """setParam(wangDist self, double val, unsigned int paramNo)"""
        return _ndlml.wangDist_setParam(self, *args)

    def getGradInput(self, *args):
        """getGradInput(wangDist self, double x) -> double"""
        return _ndlml.wangDist_getGradInput(self, *args)

    def setInitParam(self):
        """setInitParam(wangDist self)"""
        return _ndlml.wangDist_setInitParam(self)

    def logProb(self, *args):
        """logProb(wangDist self, double val) -> double"""
        return _ndlml.wangDist_logProb(self, *args)

wangDist_swigregister = _ndlml.wangDist_swigregister
wangDist_swigregister(wangDist)

class CParamPriors:
    """Proxy of C++ CParamPriors class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CParamPriors, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CParamPriors, name)
    __repr__ = _swig_repr
    def addDist(self, *args):
        """addDist(CParamPriors self, CDist dist, unsigned int index)"""
        return _ndlml.CParamPriors_addDist(self, *args)

    def clearDists(self):
        """clearDists(CParamPriors self)"""
        return _ndlml.CParamPriors_clearDists(self)

    def getDistType(self, *args):
        """getDistType(CParamPriors self, unsigned int ind) -> std::string"""
        return _ndlml.CParamPriors_getDistType(self, *args)

    def getDistIndex(self, *args):
        """getDistIndex(CParamPriors self, unsigned int ind) -> unsigned int"""
        return _ndlml.CParamPriors_getDistIndex(self, *args)

    def getNumDists(self):
        """getNumDists(CParamPriors self) -> unsigned int"""
        return _ndlml.CParamPriors_getNumDists(self)

    __swig_setmethods__["dists"] = _ndlml.CParamPriors_dists_set
    __swig_getmethods__["dists"] = _ndlml.CParamPriors_dists_get
    __swig_setmethods__["distIndex"] = _ndlml.CParamPriors_distIndex_set
    __swig_getmethods__["distIndex"] = _ndlml.CParamPriors_distIndex_get
    def __init__(self): 
        """__init__(CParamPriors self) -> CParamPriors"""
        this = _ndlml.new_CParamPriors()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ndlml.delete_CParamPriors
    __del__ = lambda self : None;
CParamPriors_swigregister = _ndlml.CParamPriors_swigregister
CParamPriors_swigregister(CParamPriors)

class CRegularisable:
    """Proxy of C++ CRegularisable class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CRegularisable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CRegularisable, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ndlml.delete_CRegularisable
    __del__ = lambda self : None;
    def getNumParams(self):
        """getNumParams(CRegularisable self) -> unsigned int"""
        return _ndlml.CRegularisable_getNumParams(self)

    def getParam(self, *args):
        """getParam(CRegularisable self, unsigned int paramNo) -> double"""
        return _ndlml.CRegularisable_getParam(self, *args)

    def setParam(self, *args):
        """setParam(CRegularisable self, double val, unsigned int paramNo)"""
        return _ndlml.CRegularisable_setParam(self, *args)

    def getGradParams(self, *args):
        """getGradParams(CRegularisable self, matrix g)"""
        return _ndlml.CRegularisable_getGradParams(self, *args)

    def getParams(self, *args):
        """getParams(CRegularisable self, matrix params)"""
        return _ndlml.CRegularisable_getParams(self, *args)

    def setParams(self, *args):
        """setParams(CRegularisable self, matrix params)"""
        return _ndlml.CRegularisable_setParams(self, *args)

    def addPriorGrad(self, *args):
        """addPriorGrad(CRegularisable self, matrix g)"""
        return _ndlml.CRegularisable_addPriorGrad(self, *args)

    def writePriorsToStream(self, *args):
        """writePriorsToStream(CRegularisable self, ostream & out)"""
        return _ndlml.CRegularisable_writePriorsToStream(self, *args)

    def readPriorsFromStream(self, *args):
        """readPriorsFromStream(CRegularisable self, istream & _in, unsigned int numPriors)"""
        return _ndlml.CRegularisable_readPriorsFromStream(self, *args)

    def priorLogProb(self):
        """priorLogProb(CRegularisable self) -> double"""
        return _ndlml.CRegularisable_priorLogProb(self)

    def getNumPriors(self):
        """getNumPriors(CRegularisable self) -> unsigned int"""
        return _ndlml.CRegularisable_getNumPriors(self)

    def getPrior(self, *args):
        """getPrior(CRegularisable self, unsigned int ind) -> CDist"""
        return _ndlml.CRegularisable_getPrior(self, *args)

    def getPriorType(self, *args):
        """getPriorType(CRegularisable self, unsigned int ind) -> std::string"""
        return _ndlml.CRegularisable_getPriorType(self, *args)

    def getPriorIndex(self, *args):
        """getPriorIndex(CRegularisable self, unsigned int ind) -> unsigned int"""
        return _ndlml.CRegularisable_getPriorIndex(self, *args)

    def getPriorGradInput(self, *args):
        """getPriorGradInput(CRegularisable self, double val, unsigned int ind) -> double"""
        return _ndlml.CRegularisable_getPriorGradInput(self, *args)

    def addPrior(self, *args):
        """addPrior(CRegularisable self, CDist dist, unsigned int index)"""
        return _ndlml.CRegularisable_addPrior(self, *args)

    def clearPriors(self):
        """clearPriors(CRegularisable self)"""
        return _ndlml.CRegularisable_clearPriors(self)

CRegularisable_swigregister = _ndlml.CRegularisable_swigregister
CRegularisable_swigregister(CRegularisable)

class ndlnoise(CTransformable,COptimisable,CStreamInterface,CMatInterface):
    """Proxy of C++ CNoise class"""
    __swig_setmethods__ = {}
    for _s in [CTransformable,COptimisable,CStreamInterface,CMatInterface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ndlnoise, name, value)
    __swig_getmethods__ = {}
    for _s in [CTransformable,COptimisable,CStreamInterface,CMatInterface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ndlnoise, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ndlml.delete_ndlnoise
    __del__ = lambda self : None;
    def initStoreage(self):
        """initStoreage(ndlnoise self)"""
        return _ndlml.ndlnoise_initStoreage(self)

    def initNames(self):
        """initNames(ndlnoise self)"""
        return _ndlml.ndlnoise_initNames(self)

    def initVals(self):
        """initVals(ndlnoise self)"""
        return _ndlml.ndlnoise_initVals(self)

    def initParams(self):
        """initParams(ndlnoise self)"""
        return _ndlml.ndlnoise_initParams(self)

    def display(self, *args):
        """display(ndlnoise self, ostream & os) -> ostream &"""
        return _ndlml.ndlnoise_display(self, *args)

    def setParams(self, *args):
        """setParams(ndlnoise self, matrix X)"""
        return _ndlml.ndlnoise_setParams(self, *args)

    def getParams(self, *args):
        """getParams(ndlnoise self, matrix X)"""
        return _ndlml.ndlnoise_getParams(self, *args)

    def getGradParams(self, *args):
        """getGradParams(ndlnoise self, matrix g)"""
        return _ndlml.ndlnoise_getGradParams(self, *args)

    def getGradInputs(self, *args):
        """
        getGradInputs(ndlnoise self, double & dlnZ_dmu, double & dlnZ_dvs, unsigned int i, unsigned int j)
        getGradInputs(ndlnoise self, matrix dlnZ_dmu, matrix dlnZ_dvs)
        """
        return _ndlml.ndlnoise_getGradInputs(self, *args)

    def getNuG(self, *args):
        """getNuG(ndlnoise self, matrix g, matrix nu, unsigned int index)"""
        return _ndlml.ndlnoise_getNuG(self, *args)

    def updateSites(self, *args):
        """updateSites(ndlnoise self, matrix m, matrix beta, unsigned int actIndex, matrix g, matrix nu, unsigned int index)"""
        return _ndlml.ndlnoise_updateSites(self, *args)

    def test(self, *args):
        """test(ndlnoise self, matrix muout, matrix varSigmaOut, matrix yTest)"""
        return _ndlml.ndlnoise_test(self, *args)

    def out(self, *args):
        """
        out(ndlnoise self, matrix yPred, matrix muTest, matrix varSigmaTest)
        out(ndlnoise self, matrix yPred, matrix probOut, matrix muTest, matrix varSigmaTest)
        """
        return _ndlml.ndlnoise_out(self, *args)

    def likelihoods(self, *args):
        """likelihoods(ndlnoise self, matrix L, matrix muTest, matrix varSigmaTest, matrix yTest)"""
        return _ndlml.ndlnoise_likelihoods(self, *args)

    def logLikelihood(self, *args):
        """
        logLikelihood(ndlnoise self, matrix muTest, matrix varSigmaTest, matrix yTest) -> double
        logLikelihood(ndlnoise self) -> double
        """
        return _ndlml.ndlnoise_logLikelihood(self, *args)

    def writeParamsToStream(self, *args):
        """writeParamsToStream(ndlnoise self, ostream & out)"""
        return _ndlml.ndlnoise_writeParamsToStream(self, *args)

    def readParamsFromStream(self, *args):
        """readParamsFromStream(ndlnoise self, istream & _in)"""
        return _ndlml.ndlnoise_readParamsFromStream(self, *args)

    def setType(self, *args):
        """setType(ndlnoise self, std::string const name)"""
        return _ndlml.ndlnoise_setType(self, *args)

    def getType(self):
        """getType(ndlnoise self) -> std::string"""
        return _ndlml.ndlnoise_getType(self)

    def getBaseType(self):
        """getBaseType(ndlnoise self) -> std::string"""
        return _ndlml.ndlnoise_getBaseType(self)

    def getName(self):
        """getName(ndlnoise self) -> std::string"""
        return _ndlml.ndlnoise_getName(self)

    def setName(self, *args):
        """setName(ndlnoise self, std::string const name)"""
        return _ndlml.ndlnoise_setName(self, *args)

    def getOptNumParams(self):
        """getOptNumParams(ndlnoise self) -> unsigned int"""
        return _ndlml.ndlnoise_getOptNumParams(self)

    def getOptParams(self, *args):
        """getOptParams(ndlnoise self, matrix params)"""
        return _ndlml.ndlnoise_getOptParams(self, *args)

    def setOptParams(self, *args):
        """setOptParams(ndlnoise self, matrix params)"""
        return _ndlml.ndlnoise_setOptParams(self, *args)

    def computeObjectiveGradParams(self, *args):
        """computeObjectiveGradParams(ndlnoise self, matrix g) -> double"""
        return _ndlml.ndlnoise_computeObjectiveGradParams(self, *args)

    def computeObjectiveVal(self):
        """computeObjectiveVal(ndlnoise self) -> double"""
        return _ndlml.ndlnoise_computeObjectiveVal(self)

    def isLogConcave(self):
        """isLogConcave(ndlnoise self) -> bool"""
        return _ndlml.ndlnoise_isLogConcave(self)

    def isSpherical(self):
        """isSpherical(ndlnoise self) -> bool"""
        return _ndlml.ndlnoise_isSpherical(self)

    def isMissing(self):
        """isMissing(ndlnoise self) -> bool"""
        return _ndlml.ndlnoise_isMissing(self)

    def getNumParams(self):
        """getNumParams(ndlnoise self) -> unsigned int"""
        return _ndlml.ndlnoise_getNumParams(self)

    def getOutputDim(self):
        """getOutputDim(ndlnoise self) -> unsigned int"""
        return _ndlml.ndlnoise_getOutputDim(self)

    def getNumData(self):
        """getNumData(ndlnoise self) -> unsigned int"""
        return _ndlml.ndlnoise_getNumData(self)

    def getParamName(self, *args):
        """getParamName(ndlnoise self, unsigned int index) -> std::string"""
        return _ndlml.ndlnoise_getParamName(self, *args)

    def setParamName(self, *args):
        """setParamName(ndlnoise self, std::string const paramName, unsigned int index)"""
        return _ndlml.ndlnoise_setParamName(self, *args)

    def setMu(self, *args):
        """setMu(ndlnoise self, double val, unsigned int i, unsigned int j)"""
        return _ndlml.ndlnoise_setMu(self, *args)

    def getMu(self, *args):
        """getMu(ndlnoise self, unsigned int i, unsigned int j) -> double"""
        return _ndlml.ndlnoise_getMu(self, *args)

    def setVarSigma(self, *args):
        """setVarSigma(ndlnoise self, double val, unsigned int i, unsigned int j)"""
        return _ndlml.ndlnoise_setVarSigma(self, *args)

    def getVarSigma(self, *args):
        """getVarSigma(ndlnoise self, unsigned int i, unsigned int j) -> double"""
        return _ndlml.ndlnoise_getVarSigma(self, *args)

    def getTarget(self, *args):
        """getTarget(ndlnoise self, unsigned int i, unsigned int j) -> double"""
        return _ndlml.ndlnoise_getTarget(self, *args)

    def setTarget(self, *args):
        """setTarget(ndlnoise self, matrix vals)"""
        return _ndlml.ndlnoise_setTarget(self, *args)

    def setMus(self, *args):
        """
        setMus(ndlnoise self, double val)
        setMus(ndlnoise self, matrix vals)
        """
        return _ndlml.ndlnoise_setMus(self, *args)

    def setVarSigmas(self, *args):
        """
        setVarSigmas(ndlnoise self, double val)
        setVarSigmas(ndlnoise self, matrix vals)
        """
        return _ndlml.ndlnoise_setVarSigmas(self, *args)

    def equals(self, *args):
        """
        equals(ndlnoise self, ndlnoise noise, double tol=ndlutil::MATCHTOL) -> bool
        equals(ndlnoise self, ndlnoise noise) -> bool
        """
        return _ndlml.ndlnoise_equals(self, *args)

    __swig_setmethods__["py"] = _ndlml.ndlnoise_py_set
    __swig_getmethods__["py"] = _ndlml.ndlnoise_py_get
    def __str__(self): return _ndlml.ndlnoise___str__(self)
ndlnoise_swigregister = _ndlml.ndlnoise_swigregister
ndlnoise_swigregister(ndlnoise)
NOISEVERSION = cvar.NOISEVERSION

class gaussianNoise(ndlnoise):
    """Proxy of C++ CGaussianNoise class"""
    __swig_setmethods__ = {}
    for _s in [ndlnoise]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, gaussianNoise, name, value)
    __swig_getmethods__ = {}
    for _s in [ndlnoise]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, gaussianNoise, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(CGaussianNoise self) -> gaussianNoise
        __init__(CGaussianNoise self, matrix pyin) -> gaussianNoise
        """
        this = _ndlml.new_gaussianNoise(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ndlml.delete_gaussianNoise
    __del__ = lambda self : None;
    def initStoreage(self):
        """initStoreage(gaussianNoise self)"""
        return _ndlml.gaussianNoise_initStoreage(self)

    def initNames(self):
        """initNames(gaussianNoise self)"""
        return _ndlml.gaussianNoise_initNames(self)

    def initVals(self):
        """initVals(gaussianNoise self)"""
        return _ndlml.gaussianNoise_initVals(self)

    def initParams(self):
        """initParams(gaussianNoise self)"""
        return _ndlml.gaussianNoise_initParams(self)

    def display(self, *args):
        """display(gaussianNoise self, ostream & os) -> ostream &"""
        return _ndlml.gaussianNoise_display(self, *args)

    def setParams(self, *args):
        """setParams(gaussianNoise self, matrix params)"""
        return _ndlml.gaussianNoise_setParams(self, *args)

    def setParam(self, *args):
        """setParam(gaussianNoise self, double val, unsigned int index)"""
        return _ndlml.gaussianNoise_setParam(self, *args)

    def getParams(self, *args):
        """getParams(gaussianNoise self, matrix params)"""
        return _ndlml.gaussianNoise_getParams(self, *args)

    def getParam(self, *args):
        """getParam(gaussianNoise self, unsigned int index) -> double"""
        return _ndlml.gaussianNoise_getParam(self, *args)

    def getGradParams(self, *args):
        """getGradParams(gaussianNoise self, matrix g)"""
        return _ndlml.gaussianNoise_getGradParams(self, *args)

    def getGradInputs(self, *args):
        """getGradInputs(gaussianNoise self, double & gmu, double & gvs, unsigned int i, unsigned int j)"""
        return _ndlml.gaussianNoise_getGradInputs(self, *args)

    def getNuG(self, *args):
        """getNuG(gaussianNoise self, matrix g, matrix nu, unsigned int index)"""
        return _ndlml.gaussianNoise_getNuG(self, *args)

    def updateSites(self, *args):
        """updateSites(gaussianNoise self, matrix m, matrix beta, unsigned int actIndex, matrix g, matrix nu, unsigned int index)"""
        return _ndlml.gaussianNoise_updateSites(self, *args)

    def test(self, *args):
        """test(gaussianNoise self, matrix muout, matrix varSigmaOut, matrix yTest)"""
        return _ndlml.gaussianNoise_test(self, *args)

    def out(self, *args):
        """
        out(gaussianNoise self, matrix yPred, matrix muTest, matrix varSigmaTest)
        out(gaussianNoise self, matrix yPred, matrix errorBarOut, matrix muTest, matrix varSigmaTest)
        """
        return _ndlml.gaussianNoise_out(self, *args)

    def likelihoods(self, *args):
        """likelihoods(gaussianNoise self, matrix L, matrix muTest, matrix varSigmaTest, matrix yTest)"""
        return _ndlml.gaussianNoise_likelihoods(self, *args)

    def logLikelihood(self, *args):
        """
        logLikelihood(gaussianNoise self, matrix muTest, matrix varSigmaTest, matrix yTest) -> double
        logLikelihood(gaussianNoise self) -> double
        """
        return _ndlml.gaussianNoise_logLikelihood(self, *args)

    def getMu(self, *args):
        """getMu(gaussianNoise self, unsigned int i, unsigned int j) -> double"""
        return _ndlml.gaussianNoise_getMu(self, *args)

    def setMu(self, *args):
        """setMu(gaussianNoise self, double val, unsigned int i, unsigned int j)"""
        return _ndlml.gaussianNoise_setMu(self, *args)

    def getVarSigma(self, *args):
        """getVarSigma(gaussianNoise self, unsigned int i, unsigned int j) -> double"""
        return _ndlml.gaussianNoise_getVarSigma(self, *args)

    def setVarSigma(self, *args):
        """setVarSigma(gaussianNoise self, double val, unsigned int i, unsigned int j)"""
        return _ndlml.gaussianNoise_setVarSigma(self, *args)

    def getTarget(self, *args):
        """getTarget(gaussianNoise self, unsigned int i, unsigned int j) -> double"""
        return _ndlml.gaussianNoise_getTarget(self, *args)

    def getBiasVal(self, *args):
        """getBiasVal(gaussianNoise self, unsigned int index) -> double"""
        return _ndlml.gaussianNoise_getBiasVal(self, *args)

    def setBiasVal(self, *args):
        """setBiasVal(gaussianNoise self, double val, unsigned int index)"""
        return _ndlml.gaussianNoise_setBiasVal(self, *args)

    def setBias(self, *args):
        """setBias(gaussianNoise self, matrix bia)"""
        return _ndlml.gaussianNoise_setBias(self, *args)

gaussianNoise_swigregister = _ndlml.gaussianNoise_swigregister
gaussianNoise_swigregister(gaussianNoise)

class scaleNoise(ndlnoise):
    """Proxy of C++ CScaleNoise class"""
    __swig_setmethods__ = {}
    for _s in [ndlnoise]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, scaleNoise, name, value)
    __swig_getmethods__ = {}
    for _s in [ndlnoise]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, scaleNoise, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(CScaleNoise self) -> scaleNoise
        __init__(CScaleNoise self, matrix pyin) -> scaleNoise
        """
        this = _ndlml.new_scaleNoise(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ndlml.delete_scaleNoise
    __del__ = lambda self : None;
    def getScale(self, *args):
        """getScale(scaleNoise self, unsigned int index) -> double"""
        return _ndlml.scaleNoise_getScale(self, *args)

    def setScale(self, *args):
        """setScale(scaleNoise self, double val, unsigned int index)"""
        return _ndlml.scaleNoise_setScale(self, *args)

    def getBias(self, *args):
        """getBias(scaleNoise self, unsigned int index) -> double"""
        return _ndlml.scaleNoise_getBias(self, *args)

    def setBias(self, *args):
        """setBias(scaleNoise self, double val, unsigned int index)"""
        return _ndlml.scaleNoise_setBias(self, *args)

    def initStoreage(self):
        """initStoreage(scaleNoise self)"""
        return _ndlml.scaleNoise_initStoreage(self)

    def initNames(self):
        """initNames(scaleNoise self)"""
        return _ndlml.scaleNoise_initNames(self)

    def initVals(self):
        """initVals(scaleNoise self)"""
        return _ndlml.scaleNoise_initVals(self)

    def initParams(self):
        """initParams(scaleNoise self)"""
        return _ndlml.scaleNoise_initParams(self)

    def display(self, *args):
        """display(scaleNoise self, ostream & os) -> ostream &"""
        return _ndlml.scaleNoise_display(self, *args)

    def setParams(self, *args):
        """setParams(scaleNoise self, matrix params)"""
        return _ndlml.scaleNoise_setParams(self, *args)

    def setParam(self, *args):
        """setParam(scaleNoise self, double val, unsigned int index)"""
        return _ndlml.scaleNoise_setParam(self, *args)

    def getParams(self, *args):
        """getParams(scaleNoise self, matrix params)"""
        return _ndlml.scaleNoise_getParams(self, *args)

    def getParam(self, *args):
        """getParam(scaleNoise self, unsigned int index) -> double"""
        return _ndlml.scaleNoise_getParam(self, *args)

    def getGradParams(self, *args):
        """getGradParams(scaleNoise self, matrix g)"""
        return _ndlml.scaleNoise_getGradParams(self, *args)

    def getGradInputs(self, *args):
        """getGradInputs(scaleNoise self, double & gmu, double & gvs, unsigned int i, unsigned int j)"""
        return _ndlml.scaleNoise_getGradInputs(self, *args)

    def getNuG(self, *args):
        """getNuG(scaleNoise self, matrix g, matrix nu, unsigned int index)"""
        return _ndlml.scaleNoise_getNuG(self, *args)

    def updateSites(self, *args):
        """updateSites(scaleNoise self, matrix m, matrix beta, unsigned int actIndex, matrix g, matrix nu, unsigned int index)"""
        return _ndlml.scaleNoise_updateSites(self, *args)

    def test(self, *args):
        """test(scaleNoise self, matrix muout, matrix varSigmaOut, matrix yTest)"""
        return _ndlml.scaleNoise_test(self, *args)

    def out(self, *args):
        """
        out(scaleNoise self, matrix yPred, matrix muTest, matrix varSigmaTest)
        out(scaleNoise self, matrix yPred, matrix errorBarOut, matrix muTest, matrix varSigmaTest)
        """
        return _ndlml.scaleNoise_out(self, *args)

    def likelihoods(self, *args):
        """likelihoods(scaleNoise self, matrix L, matrix muTest, matrix varSigmaTest, matrix yTest)"""
        return _ndlml.scaleNoise_likelihoods(self, *args)

    def logLikelihood(self, *args):
        """
        logLikelihood(scaleNoise self, matrix muTest, matrix varSigmaTest, matrix yTest) -> double
        logLikelihood(scaleNoise self) -> double
        """
        return _ndlml.scaleNoise_logLikelihood(self, *args)

    def getMu(self, *args):
        """getMu(scaleNoise self, unsigned int i, unsigned int j) -> double"""
        return _ndlml.scaleNoise_getMu(self, *args)

    def setMu(self, *args):
        """setMu(scaleNoise self, double val, unsigned int i, unsigned int j)"""
        return _ndlml.scaleNoise_setMu(self, *args)

    def getVarSigma(self, *args):
        """getVarSigma(scaleNoise self, unsigned int i, unsigned int j) -> double"""
        return _ndlml.scaleNoise_getVarSigma(self, *args)

    def setVarSigma(self, *args):
        """setVarSigma(scaleNoise self, double val, unsigned int i, unsigned int j)"""
        return _ndlml.scaleNoise_setVarSigma(self, *args)

    def getTarget(self, *args):
        """getTarget(scaleNoise self, unsigned int i, unsigned int j) -> double"""
        return _ndlml.scaleNoise_getTarget(self, *args)

scaleNoise_swigregister = _ndlml.scaleNoise_swigregister
scaleNoise_swigregister(scaleNoise)

class probitNoise(ndlnoise):
    """Proxy of C++ CProbitNoise class"""
    __swig_setmethods__ = {}
    for _s in [ndlnoise]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, probitNoise, name, value)
    __swig_getmethods__ = {}
    for _s in [ndlnoise]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, probitNoise, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(CProbitNoise self) -> probitNoise
        __init__(CProbitNoise self, matrix pyin) -> probitNoise
        """
        this = _ndlml.new_probitNoise(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ndlml.delete_probitNoise
    __del__ = lambda self : None;
    def initStoreage(self):
        """initStoreage(probitNoise self)"""
        return _ndlml.probitNoise_initStoreage(self)

    def initNames(self):
        """initNames(probitNoise self)"""
        return _ndlml.probitNoise_initNames(self)

    def initVals(self):
        """initVals(probitNoise self)"""
        return _ndlml.probitNoise_initVals(self)

    def initParams(self):
        """initParams(probitNoise self)"""
        return _ndlml.probitNoise_initParams(self)

    def display(self, *args):
        """display(probitNoise self, ostream & os) -> ostream &"""
        return _ndlml.probitNoise_display(self, *args)

    def setParams(self, *args):
        """setParams(probitNoise self, matrix params)"""
        return _ndlml.probitNoise_setParams(self, *args)

    def setParam(self, *args):
        """setParam(probitNoise self, double val, unsigned int index)"""
        return _ndlml.probitNoise_setParam(self, *args)

    def getParams(self, *args):
        """getParams(probitNoise self, matrix params)"""
        return _ndlml.probitNoise_getParams(self, *args)

    def getParam(self, *args):
        """getParam(probitNoise self, unsigned int index) -> double"""
        return _ndlml.probitNoise_getParam(self, *args)

    def getGradParams(self, *args):
        """getGradParams(probitNoise self, matrix g)"""
        return _ndlml.probitNoise_getGradParams(self, *args)

    def getGradInputs(self, *args):
        """getGradInputs(probitNoise self, double & gmu, double & gvs, unsigned int i, unsigned int j)"""
        return _ndlml.probitNoise_getGradInputs(self, *args)

    def test(self, *args):
        """test(probitNoise self, matrix muout, matrix varSigmaOut, matrix yTest)"""
        return _ndlml.probitNoise_test(self, *args)

    def out(self, *args):
        """
        out(probitNoise self, matrix yPred, matrix muTest, matrix varSigmaTest)
        out(probitNoise self, matrix yPred, matrix probOut, matrix muTest, matrix varSigmaTest)
        """
        return _ndlml.probitNoise_out(self, *args)

    def likelihoods(self, *args):
        """likelihoods(probitNoise self, matrix L, matrix muTest, matrix varSigmaTest, matrix yTest)"""
        return _ndlml.probitNoise_likelihoods(self, *args)

    def logLikelihood(self, *args):
        """
        logLikelihood(probitNoise self, matrix muTest, matrix varSigmaTest, matrix yTest) -> double
        logLikelihood(probitNoise self) -> double
        """
        return _ndlml.probitNoise_logLikelihood(self, *args)

    def getMu(self, *args):
        """getMu(probitNoise self, unsigned int i, unsigned int j) -> double"""
        return _ndlml.probitNoise_getMu(self, *args)

    def setMu(self, *args):
        """setMu(probitNoise self, double val, unsigned int i, unsigned int j)"""
        return _ndlml.probitNoise_setMu(self, *args)

    def getVarSigma(self, *args):
        """getVarSigma(probitNoise self, unsigned int i, unsigned int j) -> double"""
        return _ndlml.probitNoise_getVarSigma(self, *args)

    def setVarSigma(self, *args):
        """setVarSigma(probitNoise self, double val, unsigned int i, unsigned int j)"""
        return _ndlml.probitNoise_setVarSigma(self, *args)

    def getTarget(self, *args):
        """getTarget(probitNoise self, unsigned int i, unsigned int j) -> double"""
        return _ndlml.probitNoise_getTarget(self, *args)

probitNoise_swigregister = _ndlml.probitNoise_swigregister
probitNoise_swigregister(probitNoise)

class ncnmNoise(ndlnoise):
    """Proxy of C++ CNcnmNoise class"""
    __swig_setmethods__ = {}
    for _s in [ndlnoise]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ncnmNoise, name, value)
    __swig_getmethods__ = {}
    for _s in [ndlnoise]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ncnmNoise, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(CNcnmNoise self) -> ncnmNoise
        __init__(CNcnmNoise self, matrix pyin) -> ncnmNoise
        """
        this = _ndlml.new_ncnmNoise(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ndlml.delete_ncnmNoise
    __del__ = lambda self : None;
    def initStoreage(self):
        """initStoreage(ncnmNoise self)"""
        return _ndlml.ncnmNoise_initStoreage(self)

    def initNames(self):
        """initNames(ncnmNoise self)"""
        return _ndlml.ncnmNoise_initNames(self)

    def initVals(self):
        """initVals(ncnmNoise self)"""
        return _ndlml.ncnmNoise_initVals(self)

    def initParams(self):
        """initParams(ncnmNoise self)"""
        return _ndlml.ncnmNoise_initParams(self)

    def display(self, *args):
        """display(ncnmNoise self, ostream & os) -> ostream &"""
        return _ndlml.ncnmNoise_display(self, *args)

    def setParams(self, *args):
        """setParams(ncnmNoise self, matrix params)"""
        return _ndlml.ncnmNoise_setParams(self, *args)

    def setParam(self, *args):
        """setParam(ncnmNoise self, double val, unsigned int index)"""
        return _ndlml.ncnmNoise_setParam(self, *args)

    def getParams(self, *args):
        """getParams(ncnmNoise self, matrix params)"""
        return _ndlml.ncnmNoise_getParams(self, *args)

    def getParam(self, *args):
        """getParam(ncnmNoise self, unsigned int index) -> double"""
        return _ndlml.ncnmNoise_getParam(self, *args)

    def getGradParams(self, *args):
        """getGradParams(ncnmNoise self, matrix g)"""
        return _ndlml.ncnmNoise_getGradParams(self, *args)

    def getGradInputs(self, *args):
        """getGradInputs(ncnmNoise self, double & gmu, double & gvs, unsigned int i, unsigned int j)"""
        return _ndlml.ncnmNoise_getGradInputs(self, *args)

    def test(self, *args):
        """test(ncnmNoise self, matrix muout, matrix varSigmaOut, matrix yTest)"""
        return _ndlml.ncnmNoise_test(self, *args)

    def out(self, *args):
        """
        out(ncnmNoise self, matrix yPred, matrix muTest, matrix varSigmaTest)
        out(ncnmNoise self, matrix yPred, matrix probOut, matrix muTest, matrix varSigmaTest)
        """
        return _ndlml.ncnmNoise_out(self, *args)

    def likelihoods(self, *args):
        """likelihoods(ncnmNoise self, matrix L, matrix muTest, matrix varSigmaTest, matrix yTest)"""
        return _ndlml.ncnmNoise_likelihoods(self, *args)

    def writeParamsToStream(self, *args):
        """writeParamsToStream(ncnmNoise self, ostream & out)"""
        return _ndlml.ncnmNoise_writeParamsToStream(self, *args)

    def readParamsFromStream(self, *args):
        """readParamsFromStream(ncnmNoise self, istream & _in)"""
        return _ndlml.ncnmNoise_readParamsFromStream(self, *args)

    def logLikelihood(self, *args):
        """
        logLikelihood(ncnmNoise self, matrix muTest, matrix varSigmaTest, matrix yTest) -> double
        logLikelihood(ncnmNoise self) -> double
        """
        return _ndlml.ncnmNoise_logLikelihood(self, *args)

    def getMu(self, *args):
        """getMu(ncnmNoise self, unsigned int i, unsigned int j) -> double"""
        return _ndlml.ncnmNoise_getMu(self, *args)

    def setMu(self, *args):
        """setMu(ncnmNoise self, double val, unsigned int i, unsigned int j)"""
        return _ndlml.ncnmNoise_setMu(self, *args)

    def getVarSigma(self, *args):
        """getVarSigma(ncnmNoise self, unsigned int i, unsigned int j) -> double"""
        return _ndlml.ncnmNoise_getVarSigma(self, *args)

    def setVarSigma(self, *args):
        """setVarSigma(ncnmNoise self, double val, unsigned int i, unsigned int j)"""
        return _ndlml.ncnmNoise_setVarSigma(self, *args)

    def setSplitGamma(self, *args):
        """setSplitGamma(ncnmNoise self, bool const val)"""
        return _ndlml.ncnmNoise_setSplitGamma(self, *args)

    def isSplitGamma(self):
        """isSplitGamma(ncnmNoise self) -> bool"""
        return _ndlml.ncnmNoise_isSplitGamma(self)

    def getTarget(self, *args):
        """getTarget(ncnmNoise self, unsigned int i, unsigned int j) -> double"""
        return _ndlml.ncnmNoise_getTarget(self, *args)

    def setTarget(self, *args):
        """setTarget(ncnmNoise self, matrix vals)"""
        return _ndlml.ncnmNoise_setTarget(self, *args)

ncnmNoise_swigregister = _ndlml.ncnmNoise_swigregister
ncnmNoise_swigregister(ncnmNoise)

class orderedNoise(ndlnoise):
    """Proxy of C++ COrderedNoise class"""
    __swig_setmethods__ = {}
    for _s in [ndlnoise]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, orderedNoise, name, value)
    __swig_getmethods__ = {}
    for _s in [ndlnoise]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, orderedNoise, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(COrderedNoise self) -> orderedNoise
        __init__(COrderedNoise self, matrix pyin) -> orderedNoise
        __init__(COrderedNoise self, matrix pyin, unsigned int numCts) -> orderedNoise
        """
        this = _ndlml.new_orderedNoise(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ndlml.delete_orderedNoise
    __del__ = lambda self : None;
    def getNumCategories(self):
        """getNumCategories(orderedNoise self) -> unsigned int"""
        return _ndlml.orderedNoise_getNumCategories(self)

    def setNumCategories(self, *args):
        """setNumCategories(orderedNoise self, unsigned int val)"""
        return _ndlml.orderedNoise_setNumCategories(self, *args)

    def initStoreage(self):
        """initStoreage(orderedNoise self)"""
        return _ndlml.orderedNoise_initStoreage(self)

    def initNames(self):
        """initNames(orderedNoise self)"""
        return _ndlml.orderedNoise_initNames(self)

    def initVals(self):
        """initVals(orderedNoise self)"""
        return _ndlml.orderedNoise_initVals(self)

    def initParams(self):
        """initParams(orderedNoise self)"""
        return _ndlml.orderedNoise_initParams(self)

    def display(self, *args):
        """display(orderedNoise self, ostream & os) -> ostream &"""
        return _ndlml.orderedNoise_display(self, *args)

    def setParams(self, *args):
        """setParams(orderedNoise self, matrix params)"""
        return _ndlml.orderedNoise_setParams(self, *args)

    def setParam(self, *args):
        """setParam(orderedNoise self, double val, unsigned int index)"""
        return _ndlml.orderedNoise_setParam(self, *args)

    def getParams(self, *args):
        """getParams(orderedNoise self, matrix params)"""
        return _ndlml.orderedNoise_getParams(self, *args)

    def getParam(self, *args):
        """getParam(orderedNoise self, unsigned int index) -> double"""
        return _ndlml.orderedNoise_getParam(self, *args)

    def getGradParams(self, *args):
        """getGradParams(orderedNoise self, matrix g)"""
        return _ndlml.orderedNoise_getGradParams(self, *args)

    def getGradInputs(self, *args):
        """getGradInputs(orderedNoise self, double & gmu, double & gvs, unsigned int i, unsigned int j)"""
        return _ndlml.orderedNoise_getGradInputs(self, *args)

    def test(self, *args):
        """test(orderedNoise self, matrix muout, matrix varSigmaOut, matrix yTest)"""
        return _ndlml.orderedNoise_test(self, *args)

    def out(self, *args):
        """
        out(orderedNoise self, matrix yPred, matrix muTest, matrix varSigmaTest)
        out(orderedNoise self, matrix yPred, matrix probOut, matrix muTest, matrix varSigmaTest)
        """
        return _ndlml.orderedNoise_out(self, *args)

    def likelihoods(self, *args):
        """likelihoods(orderedNoise self, matrix L, matrix muTest, matrix varSigmaTest, matrix yTest)"""
        return _ndlml.orderedNoise_likelihoods(self, *args)

    def writeParamsToStream(self, *args):
        """writeParamsToStream(orderedNoise self, ostream & out)"""
        return _ndlml.orderedNoise_writeParamsToStream(self, *args)

    def readParamsFromStream(self, *args):
        """readParamsFromStream(orderedNoise self, istream & _in)"""
        return _ndlml.orderedNoise_readParamsFromStream(self, *args)

    def logLikelihood(self, *args):
        """
        logLikelihood(orderedNoise self, matrix muTest, matrix varSigmaTest, matrix yTest) -> double
        logLikelihood(orderedNoise self) -> double
        """
        return _ndlml.orderedNoise_logLikelihood(self, *args)

    def getMu(self, *args):
        """getMu(orderedNoise self, unsigned int i, unsigned int j) -> double"""
        return _ndlml.orderedNoise_getMu(self, *args)

    def setMu(self, *args):
        """setMu(orderedNoise self, double val, unsigned int i, unsigned int j)"""
        return _ndlml.orderedNoise_setMu(self, *args)

    def getVarSigma(self, *args):
        """getVarSigma(orderedNoise self, unsigned int i, unsigned int j) -> double"""
        return _ndlml.orderedNoise_getVarSigma(self, *args)

    def setVarSigma(self, *args):
        """setVarSigma(orderedNoise self, double val, unsigned int i, unsigned int j)"""
        return _ndlml.orderedNoise_setVarSigma(self, *args)

    def getTarget(self, *args):
        """getTarget(orderedNoise self, unsigned int i, unsigned int j) -> double"""
        return _ndlml.orderedNoise_getTarget(self, *args)

orderedNoise_swigregister = _ndlml.orderedNoise_swigregister
orderedNoise_swigregister(orderedNoise)


def writeNoiseToStream(*args):
  """writeNoiseToStream(ndlnoise noise, ostream & out)"""
  return _ndlml.writeNoiseToStream(*args)

def readNoiseFromStream(*args):
  """readNoiseFromStream(istream & _in) -> ndlnoise"""
  return _ndlml.readNoiseFromStream(*args)
class kern(CMatInterface,CStreamInterface,CTransformable,CRegularisable):
    """Proxy of C++ CKern class"""
    __swig_setmethods__ = {}
    for _s in [CMatInterface,CStreamInterface,CTransformable,CRegularisable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, kern, name, value)
    __swig_getmethods__ = {}
    for _s in [CMatInterface,CStreamInterface,CTransformable,CRegularisable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, kern, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ndlml.delete_kern
    __del__ = lambda self : None;
    def clone(self):
        """clone(kern self) -> kern"""
        return _ndlml.kern_clone(self)

    def setInitParam(self):
        """setInitParam(kern self)"""
        return _ndlml.kern_setInitParam(self)

    def diagComputeElement(self, *args):
        """diagComputeElement(kern self, matrix X, unsigned int index) -> double"""
        return _ndlml.kern_diagComputeElement(self, *args)

    def diagCompute(self, *args):
        """
        diagCompute(kern self, matrix d, matrix X)
        diagCompute(kern self, matrix d, matrix X, vectorui indices)
        """
        return _ndlml.kern_diagCompute(self, *args)

    def setParam(self, *args):
        """setParam(kern self, double arg2, unsigned int arg3)"""
        return _ndlml.kern_setParam(self, *args)

    def getGradX(self, *args):
        """
        getGradX(kern self, vectorm gX, matrix X, matrix X2, bool addG=False)
        getGradX(kern self, vectorm gX, matrix X, matrix X2)
        getGradX(kern self, matrix g, matrix X, unsigned int pointNo, matrix X2, bool addG=False)
        getGradX(kern self, matrix g, matrix X, unsigned int pointNo, matrix X2)
        """
        return _ndlml.kern_getGradX(self, *args)

    def getDiagGradX(self, *args):
        """
        getDiagGradX(kern self, matrix g, matrix X, bool addG=False)
        getDiagGradX(kern self, matrix g, matrix X)
        """
        return _ndlml.kern_getDiagGradX(self, *args)

    def getVariance(self):
        """getVariance(kern self) -> double"""
        return _ndlml.kern_getVariance(self)

    def setVariance(self, *args):
        """setVariance(kern self, double val)"""
        return _ndlml.kern_setVariance(self, *args)

    def getWhite(self):
        """getWhite(kern self) -> double"""
        return _ndlml.kern_getWhite(self)

    def computeElement(self, *args):
        """computeElement(kern self, matrix X1, unsigned int index1, matrix X2, unsigned int index2) -> double"""
        return _ndlml.kern_computeElement(self, *args)

    def compute(self, *args):
        """
        compute(kern self, matrix K, matrix X1, vectorui indices1, matrix X2, vectorui indices2)
        compute(kern self, matrix K, matrix X, vectorui indices)
        compute(kern self, matrix K, matrix X)
        compute(kern self, matrix K, matrix X, matrix X2)
        compute(kern self, matrix K, matrix X, matrix X2, unsigned int row)
        """
        return _ndlml.kern_compute(self, *args)

    def getGradParams(self, *args):
        """
        getGradParams(kern self, matrix g)
        getGradParams(kern self, matrix g, matrix X, matrix X2, matrix cvGrd, bool regularise=True)
        getGradParams(kern self, matrix g, matrix X, matrix X2, matrix cvGrd)
        getGradParams(kern self, matrix g, matrix X, matrix cvGrd, bool regularise=True)
        getGradParams(kern self, matrix g, matrix X, matrix cvGrd)
        """
        return _ndlml.kern_getGradParams(self, *args)

    def getDiagGradParams(self, *args):
        """
        getDiagGradParams(kern self, matrix g, matrix X, matrix cvGrad, bool regularise=True)
        getDiagGradParams(kern self, matrix g, matrix X, matrix cvGrad)
        """
        return _ndlml.kern_getDiagGradParams(self, *args)

    def getGradParam(self, *args):
        """
        getGradParam(kern self, unsigned int index, matrix X, matrix X2, matrix cvGrd) -> double
        getGradParam(kern self, unsigned int index, matrix X, matrix cvGrd) -> double
        """
        return _ndlml.kern_getGradParam(self, *args)

    def updateX(self, *args):
        """updateX(kern self, matrix X)"""
        return _ndlml.kern_updateX(self, *args)

    def isUpdateXused(self):
        """isUpdateXused(kern self) -> bool"""
        return _ndlml.kern_isUpdateXused(self)

    def setUpdateXused(self, *args):
        """setUpdateXused(kern self, bool val)"""
        return _ndlml.kern_setUpdateXused(self, *args)

    def addKern(self, *args):
        """addKern(kern self, kern kern) -> unsigned int"""
        return _ndlml.kern_addKern(self, *args)

    def getParam(self, *args):
        """getParam(kern self, unsigned int arg2) -> double"""
        return _ndlml.kern_getParam(self, *args)

    def isStationary(self):
        """isStationary(kern self) -> bool"""
        return _ndlml.kern_isStationary(self)

    def setStationary(self, *args):
        """setStationary(kern self, bool val)"""
        return _ndlml.kern_setStationary(self, *args)

    def setParams(self, *args):
        """setParams(kern self, matrix paramVec)"""
        return _ndlml.kern_setParams(self, *args)

    def getParams(self, *args):
        """getParams(kern self, matrix paramVec)"""
        return _ndlml.kern_getParams(self, *args)

    def getType(self):
        """getType(kern self) -> std::string"""
        return _ndlml.kern_getType(self)

    def setType(self, *args):
        """setType(kern self, std::string const name)"""
        return _ndlml.kern_setType(self, *args)

    def getBaseType(self):
        """getBaseType(kern self) -> std::string"""
        return _ndlml.kern_getBaseType(self)

    def getName(self):
        """getName(kern self) -> std::string"""
        return _ndlml.kern_getName(self)

    def setName(self, *args):
        """setName(kern self, std::string const name)"""
        return _ndlml.kern_setName(self, *args)

    def setInputDim(self, *args):
        """setInputDim(kern self, unsigned int dim)"""
        return _ndlml.kern_setInputDim(self, *args)

    def getInputDim(self):
        """getInputDim(kern self) -> unsigned int"""
        return _ndlml.kern_getInputDim(self)

    def getNumParams(self):
        """getNumParams(kern self) -> unsigned int"""
        return _ndlml.kern_getNumParams(self)

    def setParamName(self, *args):
        """setParamName(kern self, std::string const name, unsigned int index)"""
        return _ndlml.kern_setParamName(self, *args)

    def getParamName(self, *args):
        """getParamName(kern self, unsigned int index) -> std::string"""
        return _ndlml.kern_getParamName(self, *args)

    def writeParamsToStream(self, *args):
        """writeParamsToStream(kern self, ostream & out)"""
        return _ndlml.kern_writeParamsToStream(self, *args)

    def readParamsFromStream(self, *args):
        """readParamsFromStream(kern self, istream & _in)"""
        return _ndlml.kern_readParamsFromStream(self, *args)

    def getGradPrior(self, *args):
        """getGradPrior(kern self, matrix g)"""
        return _ndlml.kern_getGradPrior(self, *args)

    def getPriorLogProb(self, *args):
        """getPriorLogProb(kern self, matrix L)"""
        return _ndlml.kern_getPriorLogProb(self, *args)

    def display(self, *args):
        """display(kern self, ostream & os) -> ostream &"""
        return _ndlml.kern_display(self, *args)

    def getGradTransParams(self, *args):
        """
        getGradTransParams(kern self, matrix g, matrix X, matrix X2, matrix cvGrd, bool regularise=True)
        getGradTransParams(kern self, matrix g, matrix X, matrix X2, matrix cvGrd)
        getGradTransParams(kern self, matrix g, matrix X, matrix cvGrd, bool regularise=True)
        getGradTransParams(kern self, matrix g, matrix X, matrix cvGrd)
        """
        return _ndlml.kern_getGradTransParams(self, *args)

    def getDiagGradTransParams(self, *args):
        """
        getDiagGradTransParams(kern self, matrix g, matrix X, matrix cvGrd, bool regularise=True)
        getDiagGradTransParams(kern self, matrix g, matrix X, matrix cvGrd)
        """
        return _ndlml.kern_getDiagGradTransParams(self, *args)

    def equals(self, *args):
        """
        equals(kern self, kern kern, double tol=ndlutil::MATCHTOL) -> bool
        equals(kern self, kern kern) -> bool
        """
        return _ndlml.kern_equals(self, *args)

    def __str__(self): return _ndlml.kern___str__(self)
kern_swigregister = _ndlml.kern_swigregister
kern_swigregister(kern)
KERNVERSION = cvar.KERNVERSION

class CArdKern(kern):
    """Proxy of C++ CArdKern class"""
    __swig_setmethods__ = {}
    for _s in [kern]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CArdKern, name, value)
    __swig_getmethods__ = {}
    for _s in [kern]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CArdKern, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ndlml.delete_CArdKern
    __del__ = lambda self : None;
CArdKern_swigregister = _ndlml.CArdKern_swigregister
CArdKern_swigregister(CArdKern)

class CComponentKern(kern):
    """Proxy of C++ CComponentKern class"""
    __swig_setmethods__ = {}
    for _s in [kern]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CComponentKern, name, value)
    __swig_getmethods__ = {}
    for _s in [kern]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CComponentKern, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def addKern(self, *args):
        """addKern(CComponentKern self, kern kern) -> unsigned int"""
        return _ndlml.CComponentKern_addKern(self, *args)

    def setParam(self, *args):
        """setParam(CComponentKern self, double val, unsigned int paramNo)"""
        return _ndlml.CComponentKern_setParam(self, *args)

    def getParam(self, *args):
        """getParam(CComponentKern self, unsigned int paramNo) -> double"""
        return _ndlml.CComponentKern_getParam(self, *args)

    def getParamName(self, *args):
        """getParamName(CComponentKern self, unsigned int paramNo) -> std::string"""
        return _ndlml.CComponentKern_getParamName(self, *args)

    def updateX(self, *args):
        """updateX(CComponentKern self, matrix X)"""
        return _ndlml.CComponentKern_updateX(self, *args)

    def addPrior(self, *args):
        """addPrior(CComponentKern self, CDist prior, unsigned int index)"""
        return _ndlml.CComponentKern_addPrior(self, *args)

    def priorLogProb(self):
        """priorLogProb(CComponentKern self) -> double"""
        return _ndlml.CComponentKern_priorLogProb(self)

    def readParamsFromStream(self, *args):
        """readParamsFromStream(CComponentKern self, istream & _in)"""
        return _ndlml.CComponentKern_readParamsFromStream(self, *args)

    def writeParamsToStream(self, *args):
        """writeParamsToStream(CComponentKern self, ostream & out)"""
        return _ndlml.CComponentKern_writeParamsToStream(self, *args)

    def getNumKerns(self):
        """getNumKerns(CComponentKern self) -> unsigned int"""
        return _ndlml.CComponentKern_getNumKerns(self)

    __swig_destroy__ = _ndlml.delete_CComponentKern
    __del__ = lambda self : None;
CComponentKern_swigregister = _ndlml.CComponentKern_swigregister
CComponentKern_swigregister(CComponentKern)

class cmpndKern(CComponentKern):
    """Proxy of C++ CCmpndKern class"""
    __swig_setmethods__ = {}
    for _s in [CComponentKern]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, cmpndKern, name, value)
    __swig_getmethods__ = {}
    for _s in [CComponentKern]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, cmpndKern, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _ndlml.delete_cmpndKern
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(CCmpndKern self) -> cmpndKern
        __init__(CCmpndKern self, unsigned int inDim) -> cmpndKern
        __init__(CCmpndKern self, matrix X) -> cmpndKern
        __init__(CCmpndKern self, cmpndKern arg2) -> cmpndKern
        """
        this = _ndlml.new_cmpndKern(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """clone(cmpndKern self) -> cmpndKern"""
        return _ndlml.cmpndKern_clone(self)

    def getVariance(self):
        """getVariance(cmpndKern self) -> double"""
        return _ndlml.cmpndKern_getVariance(self)

    def setVariance(self, *args):
        """setVariance(cmpndKern self, double val)"""
        return _ndlml.cmpndKern_setVariance(self, *args)

    def getWhite(self):
        """getWhite(cmpndKern self) -> double"""
        return _ndlml.cmpndKern_getWhite(self)

    def setInitParam(self):
        """setInitParam(cmpndKern self)"""
        return _ndlml.cmpndKern_setInitParam(self)

    def diagComputeElement(self, *args):
        """diagComputeElement(cmpndKern self, matrix X, unsigned int index1) -> double"""
        return _ndlml.cmpndKern_diagComputeElement(self, *args)

    def diagCompute(self, *args):
        """diagCompute(cmpndKern self, matrix d, matrix X)"""
        return _ndlml.cmpndKern_diagCompute(self, *args)

    def getGradX(self, *args):
        """
        getGradX(cmpndKern self, matrix g, matrix X, unsigned int pointNo, matrix X2, bool addG=False)
        getGradX(cmpndKern self, matrix g, matrix X, unsigned int pointNo, matrix X2)
        """
        return _ndlml.cmpndKern_getGradX(self, *args)

    def getDiagGradX(self, *args):
        """
        getDiagGradX(cmpndKern self, matrix g, matrix X, bool addG=False)
        getDiagGradX(cmpndKern self, matrix g, matrix X)
        """
        return _ndlml.cmpndKern_getDiagGradX(self, *args)

    def computeElement(self, *args):
        """computeElement(cmpndKern self, matrix X1, unsigned int index1, matrix X2, unsigned int index2) -> double"""
        return _ndlml.cmpndKern_computeElement(self, *args)

    def getGradParams(self, *args):
        """
        getGradParams(cmpndKern self, matrix g, matrix X, matrix X2, matrix cvGrd, bool regularise=True)
        getGradParams(cmpndKern self, matrix g, matrix X, matrix X2, matrix cvGrd)
        getGradParams(cmpndKern self, matrix g, matrix X, matrix cvGrd, bool regularise=True)
        getGradParams(cmpndKern self, matrix g, matrix X, matrix cvGrd)
        """
        return _ndlml.cmpndKern_getGradParams(self, *args)

    def getGradParam(self, *args):
        """
        getGradParam(cmpndKern self, unsigned int index, matrix X, matrix X2, matrix cvGrd) -> double
        getGradParam(cmpndKern self, unsigned int index, matrix X, matrix cvGrd) -> double
        """
        return _ndlml.cmpndKern_getGradParam(self, *args)

cmpndKern_swigregister = _ndlml.cmpndKern_swigregister
cmpndKern_swigregister(cmpndKern)

class tensorKern(CComponentKern):
    """Proxy of C++ CTensorKern class"""
    __swig_setmethods__ = {}
    for _s in [CComponentKern]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, tensorKern, name, value)
    __swig_getmethods__ = {}
    for _s in [CComponentKern]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, tensorKern, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _ndlml.delete_tensorKern
    __del__ = lambda self : None;
    def clone(self):
        """clone(tensorKern self) -> tensorKern"""
        return _ndlml.tensorKern_clone(self)

    def __init__(self, *args): 
        """
        __init__(CTensorKern self) -> tensorKern
        __init__(CTensorKern self, unsigned int inDim) -> tensorKern
        __init__(CTensorKern self, matrix X) -> tensorKern
        __init__(CTensorKern self, tensorKern arg2) -> tensorKern
        __init__(CTensorKern self, tensorKern arg2, unsigned int i) -> tensorKern
        """
        this = _ndlml.new_tensorKern(*args)
        try: self.this.append(this)
        except: self.this = this
    def getVariance(self):
        """getVariance(tensorKern self) -> double"""
        return _ndlml.tensorKern_getVariance(self)

    def setVariance(self, *args):
        """setVariance(tensorKern self, double val)"""
        return _ndlml.tensorKern_setVariance(self, *args)

    def getWhite(self):
        """getWhite(tensorKern self) -> double"""
        return _ndlml.tensorKern_getWhite(self)

    def setInitParam(self):
        """setInitParam(tensorKern self)"""
        return _ndlml.tensorKern_setInitParam(self)

    def diagComputeElement(self, *args):
        """diagComputeElement(tensorKern self, matrix X, unsigned int index1) -> double"""
        return _ndlml.tensorKern_diagComputeElement(self, *args)

    def diagCompute(self, *args):
        """diagCompute(tensorKern self, matrix d, matrix X)"""
        return _ndlml.tensorKern_diagCompute(self, *args)

    def getGradX(self, *args):
        """
        getGradX(tensorKern self, matrix g, matrix X, unsigned int pointNo, matrix X2, bool addG=False)
        getGradX(tensorKern self, matrix g, matrix X, unsigned int pointNo, matrix X2)
        """
        return _ndlml.tensorKern_getGradX(self, *args)

    def getDiagGradX(self, *args):
        """
        getDiagGradX(tensorKern self, matrix g, matrix X, bool addG=False)
        getDiagGradX(tensorKern self, matrix g, matrix X)
        """
        return _ndlml.tensorKern_getDiagGradX(self, *args)

    def computeElement(self, *args):
        """computeElement(tensorKern self, matrix X1, unsigned int index1, matrix X2, unsigned int index2) -> double"""
        return _ndlml.tensorKern_computeElement(self, *args)

    def getGradParams(self, *args):
        """
        getGradParams(tensorKern self, matrix g, matrix X, matrix X2, matrix cvGrd, bool regularise=True)
        getGradParams(tensorKern self, matrix g, matrix X, matrix X2, matrix cvGrd)
        getGradParams(tensorKern self, matrix g, matrix X, matrix cvGrd, bool regularise=True)
        getGradParams(tensorKern self, matrix g, matrix X, matrix cvGrd)
        """
        return _ndlml.tensorKern_getGradParams(self, *args)

    def getGradParam(self, *args):
        """
        getGradParam(tensorKern self, unsigned int index, matrix X, matrix X2, matrix cvGrd) -> double
        getGradParam(tensorKern self, unsigned int index, matrix X, matrix cvGrd) -> double
        """
        return _ndlml.tensorKern_getGradParam(self, *args)

    def addKern(self, *args):
        """addKern(tensorKern self, kern kern) -> unsigned int"""
        return _ndlml.tensorKern_addKern(self, *args)

tensorKern_swigregister = _ndlml.tensorKern_swigregister
tensorKern_swigregister(tensorKern)

class whiteKern(kern):
    """Proxy of C++ CWhiteKern class"""
    __swig_setmethods__ = {}
    for _s in [kern]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, whiteKern, name, value)
    __swig_getmethods__ = {}
    for _s in [kern]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, whiteKern, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _ndlml.delete_whiteKern
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(CWhiteKern self) -> whiteKern
        __init__(CWhiteKern self, unsigned int inDim) -> whiteKern
        __init__(CWhiteKern self, matrix X) -> whiteKern
        __init__(CWhiteKern self, whiteKern arg2) -> whiteKern
        """
        this = _ndlml.new_whiteKern(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """clone(whiteKern self) -> whiteKern"""
        return _ndlml.whiteKern_clone(self)

    def getVariance(self):
        """getVariance(whiteKern self) -> double"""
        return _ndlml.whiteKern_getVariance(self)

    def setVariance(self, *args):
        """setVariance(whiteKern self, double val)"""
        return _ndlml.whiteKern_setVariance(self, *args)

    def setInitParam(self):
        """setInitParam(whiteKern self)"""
        return _ndlml.whiteKern_setInitParam(self)

    def diagComputeElement(self, *args):
        """diagComputeElement(whiteKern self, matrix X, unsigned int index) -> double"""
        return _ndlml.whiteKern_diagComputeElement(self, *args)

    def diagCompute(self, *args):
        """diagCompute(whiteKern self, matrix d, matrix X)"""
        return _ndlml.whiteKern_diagCompute(self, *args)

    def setParam(self, *args):
        """setParam(whiteKern self, double val, unsigned int paramNum)"""
        return _ndlml.whiteKern_setParam(self, *args)

    def getParam(self, *args):
        """getParam(whiteKern self, unsigned int paramNum) -> double"""
        return _ndlml.whiteKern_getParam(self, *args)

    def getGradX(self, *args):
        """
        getGradX(whiteKern self, matrix g, matrix X, unsigned int pointNo, matrix X2, bool addG=False)
        getGradX(whiteKern self, matrix g, matrix X, unsigned int pointNo, matrix X2)
        """
        return _ndlml.whiteKern_getGradX(self, *args)

    def getDiagGradX(self, *args):
        """
        getDiagGradX(whiteKern self, matrix g, matrix X, bool addG=False)
        getDiagGradX(whiteKern self, matrix g, matrix X)
        """
        return _ndlml.whiteKern_getDiagGradX(self, *args)

    def getWhite(self):
        """getWhite(whiteKern self) -> double"""
        return _ndlml.whiteKern_getWhite(self)

    def computeElement(self, *args):
        """computeElement(whiteKern self, matrix X1, unsigned int index1, matrix X2, unsigned int index2) -> double"""
        return _ndlml.whiteKern_computeElement(self, *args)

    def compute(self, *args):
        """
        compute(whiteKern self, matrix K, matrix X)
        compute(whiteKern self, matrix K, matrix X, matrix X2)
        compute(whiteKern self, matrix K, matrix X, matrix X2, unsigned int row)
        """
        return _ndlml.whiteKern_compute(self, *args)

    def getGradParam(self, *args):
        """
        getGradParam(whiteKern self, unsigned int index, matrix X, matrix X2, matrix cvGrd) -> double
        getGradParam(whiteKern self, unsigned int index, matrix X, matrix cvGrd) -> double
        """
        return _ndlml.whiteKern_getGradParam(self, *args)

whiteKern_swigregister = _ndlml.whiteKern_swigregister
whiteKern_swigregister(whiteKern)

class whitefixedKern(kern):
    """Proxy of C++ CWhitefixedKern class"""
    __swig_setmethods__ = {}
    for _s in [kern]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, whitefixedKern, name, value)
    __swig_getmethods__ = {}
    for _s in [kern]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, whitefixedKern, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _ndlml.delete_whitefixedKern
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(CWhitefixedKern self) -> whitefixedKern
        __init__(CWhitefixedKern self, unsigned int inDim) -> whitefixedKern
        __init__(CWhitefixedKern self, matrix X) -> whitefixedKern
        __init__(CWhitefixedKern self, whitefixedKern arg2) -> whitefixedKern
        """
        this = _ndlml.new_whitefixedKern(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """clone(whitefixedKern self) -> whitefixedKern"""
        return _ndlml.whitefixedKern_clone(self)

    def getVariance(self):
        """getVariance(whitefixedKern self) -> double"""
        return _ndlml.whitefixedKern_getVariance(self)

    def setVariance(self, *args):
        """setVariance(whitefixedKern self, double val)"""
        return _ndlml.whitefixedKern_setVariance(self, *args)

    def setInitParam(self):
        """setInitParam(whitefixedKern self)"""
        return _ndlml.whitefixedKern_setInitParam(self)

    def diagComputeElement(self, *args):
        """diagComputeElement(whitefixedKern self, matrix X, unsigned int index) -> double"""
        return _ndlml.whitefixedKern_diagComputeElement(self, *args)

    def diagCompute(self, *args):
        """diagCompute(whitefixedKern self, matrix d, matrix X)"""
        return _ndlml.whitefixedKern_diagCompute(self, *args)

    def setParam(self, *args):
        """setParam(whitefixedKern self, double val, unsigned int paramNum)"""
        return _ndlml.whitefixedKern_setParam(self, *args)

    def getParam(self, *args):
        """getParam(whitefixedKern self, unsigned int paramNum) -> double"""
        return _ndlml.whitefixedKern_getParam(self, *args)

    def getGradX(self, *args):
        """
        getGradX(whitefixedKern self, matrix g, matrix X, unsigned int pointNo, matrix X2, bool addG=False)
        getGradX(whitefixedKern self, matrix g, matrix X, unsigned int pointNo, matrix X2)
        """
        return _ndlml.whitefixedKern_getGradX(self, *args)

    def getDiagGradX(self, *args):
        """
        getDiagGradX(whitefixedKern self, matrix g, matrix X, bool addG=False)
        getDiagGradX(whitefixedKern self, matrix g, matrix X)
        """
        return _ndlml.whitefixedKern_getDiagGradX(self, *args)

    def getWhite(self):
        """getWhite(whitefixedKern self) -> double"""
        return _ndlml.whitefixedKern_getWhite(self)

    def computeElement(self, *args):
        """computeElement(whitefixedKern self, matrix X1, unsigned int index1, matrix X2, unsigned int index2) -> double"""
        return _ndlml.whitefixedKern_computeElement(self, *args)

    def compute(self, *args):
        """
        compute(whitefixedKern self, matrix K, matrix X)
        compute(whitefixedKern self, matrix K, matrix X, matrix X2)
        compute(whitefixedKern self, matrix K, matrix X, matrix X2, unsigned int row)
        """
        return _ndlml.whitefixedKern_compute(self, *args)

    def getGradParam(self, *args):
        """
        getGradParam(whitefixedKern self, unsigned int index, matrix X, matrix X2, matrix cvGrd) -> double
        getGradParam(whitefixedKern self, unsigned int index, matrix X, matrix cvGrd) -> double
        """
        return _ndlml.whitefixedKern_getGradParam(self, *args)

    def writeParamsToStream(self, *args):
        """writeParamsToStream(whitefixedKern self, ostream & out)"""
        return _ndlml.whitefixedKern_writeParamsToStream(self, *args)

    def readParamsFromStream(self, *args):
        """readParamsFromStream(whitefixedKern self, istream & _in)"""
        return _ndlml.whitefixedKern_readParamsFromStream(self, *args)

    def display(self, *args):
        """display(whitefixedKern self, ostream & os) -> ostream &"""
        return _ndlml.whitefixedKern_display(self, *args)

whitefixedKern_swigregister = _ndlml.whitefixedKern_swigregister
whitefixedKern_swigregister(whitefixedKern)

class biasKern(kern):
    """Proxy of C++ CBiasKern class"""
    __swig_setmethods__ = {}
    for _s in [kern]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, biasKern, name, value)
    __swig_getmethods__ = {}
    for _s in [kern]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, biasKern, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _ndlml.delete_biasKern
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(CBiasKern self) -> biasKern
        __init__(CBiasKern self, unsigned int inDim) -> biasKern
        __init__(CBiasKern self, matrix X) -> biasKern
        __init__(CBiasKern self, biasKern arg2) -> biasKern
        """
        this = _ndlml.new_biasKern(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """clone(biasKern self) -> biasKern"""
        return _ndlml.biasKern_clone(self)

    def getVariance(self):
        """getVariance(biasKern self) -> double"""
        return _ndlml.biasKern_getVariance(self)

    def setVariance(self, *args):
        """setVariance(biasKern self, double val)"""
        return _ndlml.biasKern_setVariance(self, *args)

    def setInitParam(self):
        """setInitParam(biasKern self)"""
        return _ndlml.biasKern_setInitParam(self)

    def diagComputeElement(self, *args):
        """diagComputeElement(biasKern self, matrix X, unsigned int index) -> double"""
        return _ndlml.biasKern_diagComputeElement(self, *args)

    def diagCompute(self, *args):
        """diagCompute(biasKern self, matrix d, matrix X)"""
        return _ndlml.biasKern_diagCompute(self, *args)

    def setParam(self, *args):
        """setParam(biasKern self, double val, unsigned int paramNum)"""
        return _ndlml.biasKern_setParam(self, *args)

    def getParam(self, *args):
        """getParam(biasKern self, unsigned int paramNum) -> double"""
        return _ndlml.biasKern_getParam(self, *args)

    def getGradX(self, *args):
        """
        getGradX(biasKern self, matrix g, matrix X, unsigned int pointNo, matrix X2, bool addG=False)
        getGradX(biasKern self, matrix g, matrix X, unsigned int pointNo, matrix X2)
        """
        return _ndlml.biasKern_getGradX(self, *args)

    def getDiagGradX(self, *args):
        """
        getDiagGradX(biasKern self, matrix g, matrix X, bool addG=False)
        getDiagGradX(biasKern self, matrix g, matrix X)
        """
        return _ndlml.biasKern_getDiagGradX(self, *args)

    def getWhite(self):
        """getWhite(biasKern self) -> double"""
        return _ndlml.biasKern_getWhite(self)

    def computeElement(self, *args):
        """computeElement(biasKern self, matrix X1, unsigned int index1, matrix X2, unsigned int index2) -> double"""
        return _ndlml.biasKern_computeElement(self, *args)

    def compute(self, *args):
        """
        compute(biasKern self, matrix K, matrix X)
        compute(biasKern self, matrix K, matrix X, matrix X2)
        compute(biasKern self, matrix K, matrix X, matrix X2, unsigned int row)
        """
        return _ndlml.biasKern_compute(self, *args)

    def getGradParam(self, *args):
        """
        getGradParam(biasKern self, unsigned int index, matrix X, matrix X2, matrix cvGrd) -> double
        getGradParam(biasKern self, unsigned int index, matrix X, matrix cvGrd) -> double
        """
        return _ndlml.biasKern_getGradParam(self, *args)

biasKern_swigregister = _ndlml.biasKern_swigregister
biasKern_swigregister(biasKern)

class rbfKern(kern):
    """Proxy of C++ CRbfKern class"""
    __swig_setmethods__ = {}
    for _s in [kern]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, rbfKern, name, value)
    __swig_getmethods__ = {}
    for _s in [kern]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, rbfKern, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _ndlml.delete_rbfKern
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(CRbfKern self) -> rbfKern
        __init__(CRbfKern self, unsigned int inDim) -> rbfKern
        __init__(CRbfKern self, matrix X) -> rbfKern
        __init__(CRbfKern self, rbfKern arg2) -> rbfKern
        """
        this = _ndlml.new_rbfKern(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """clone(rbfKern self) -> rbfKern"""
        return _ndlml.rbfKern_clone(self)

    def getVariance(self):
        """getVariance(rbfKern self) -> double"""
        return _ndlml.rbfKern_getVariance(self)

    def setVariance(self, *args):
        """setVariance(rbfKern self, double val)"""
        return _ndlml.rbfKern_setVariance(self, *args)

    def setInverseWidth(self, *args):
        """setInverseWidth(rbfKern self, double val)"""
        return _ndlml.rbfKern_setInverseWidth(self, *args)

    def getInverseWidth(self):
        """getInverseWidth(rbfKern self) -> double"""
        return _ndlml.rbfKern_getInverseWidth(self)

    def setLengthScale(self, *args):
        """setLengthScale(rbfKern self, double val)"""
        return _ndlml.rbfKern_setLengthScale(self, *args)

    def getLengthScale(self):
        """getLengthScale(rbfKern self) -> double"""
        return _ndlml.rbfKern_getLengthScale(self)

    def setInitParam(self):
        """setInitParam(rbfKern self)"""
        return _ndlml.rbfKern_setInitParam(self)

    def diagComputeElement(self, *args):
        """diagComputeElement(rbfKern self, matrix X, unsigned int index) -> double"""
        return _ndlml.rbfKern_diagComputeElement(self, *args)

    def diagCompute(self, *args):
        """diagCompute(rbfKern self, matrix d, matrix X)"""
        return _ndlml.rbfKern_diagCompute(self, *args)

    def setParam(self, *args):
        """setParam(rbfKern self, double val, unsigned int paramNum)"""
        return _ndlml.rbfKern_setParam(self, *args)

    def getParam(self, *args):
        """getParam(rbfKern self, unsigned int paramNum) -> double"""
        return _ndlml.rbfKern_getParam(self, *args)

    def getGradX(self, *args):
        """
        getGradX(rbfKern self, matrix g, matrix X, unsigned int pointNo, matrix X2, bool addG=False)
        getGradX(rbfKern self, matrix g, matrix X, unsigned int pointNo, matrix X2)
        """
        return _ndlml.rbfKern_getGradX(self, *args)

    def getDiagGradX(self, *args):
        """
        getDiagGradX(rbfKern self, matrix g, matrix X, bool addG=False)
        getDiagGradX(rbfKern self, matrix g, matrix X)
        """
        return _ndlml.rbfKern_getDiagGradX(self, *args)

    def getWhite(self):
        """getWhite(rbfKern self) -> double"""
        return _ndlml.rbfKern_getWhite(self)

    def computeElement(self, *args):
        """computeElement(rbfKern self, matrix X1, unsigned int index1, matrix X2, unsigned int index2) -> double"""
        return _ndlml.rbfKern_computeElement(self, *args)

    def getGradParams(self, *args):
        """
        getGradParams(rbfKern self, matrix g, matrix X, matrix cvGrd, bool regularise=True)
        getGradParams(rbfKern self, matrix g, matrix X, matrix cvGrd)
        getGradParams(rbfKern self, matrix g, matrix X, matrix X2, matrix cvGrd, bool regularise=True)
        getGradParams(rbfKern self, matrix g, matrix X, matrix X2, matrix cvGrd)
        """
        return _ndlml.rbfKern_getGradParams(self, *args)

    def getGradParam(self, *args):
        """
        getGradParam(rbfKern self, unsigned int index, matrix X, matrix X2, matrix cvGrd) -> double
        getGradParam(rbfKern self, unsigned int index, matrix X, matrix cvGrd) -> double
        """
        return _ndlml.rbfKern_getGradParam(self, *args)

    def updateX(self, *args):
        """updateX(rbfKern self, matrix X)"""
        return _ndlml.rbfKern_updateX(self, *args)

rbfKern_swigregister = _ndlml.rbfKern_swigregister
rbfKern_swigregister(rbfKern)

class CExpKern(kern):
    """Proxy of C++ CExpKern class"""
    __swig_setmethods__ = {}
    for _s in [kern]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CExpKern, name, value)
    __swig_getmethods__ = {}
    for _s in [kern]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CExpKern, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _ndlml.delete_CExpKern
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(CExpKern self) -> CExpKern
        __init__(CExpKern self, unsigned int inDim) -> CExpKern
        __init__(CExpKern self, matrix X) -> CExpKern
        __init__(CExpKern self, CExpKern arg2) -> CExpKern
        """
        this = _ndlml.new_CExpKern(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """clone(CExpKern self) -> CExpKern"""
        return _ndlml.CExpKern_clone(self)

    def getVariance(self):
        """getVariance(CExpKern self) -> double"""
        return _ndlml.CExpKern_getVariance(self)

    def setVariance(self, *args):
        """setVariance(CExpKern self, double val)"""
        return _ndlml.CExpKern_setVariance(self, *args)

    def setInverseWidth(self, *args):
        """setInverseWidth(CExpKern self, double val)"""
        return _ndlml.CExpKern_setInverseWidth(self, *args)

    def getInverseWidth(self):
        """getInverseWidth(CExpKern self) -> double"""
        return _ndlml.CExpKern_getInverseWidth(self)

    def setLengthScale(self, *args):
        """setLengthScale(CExpKern self, double val)"""
        return _ndlml.CExpKern_setLengthScale(self, *args)

    def getLengthScale(self):
        """getLengthScale(CExpKern self) -> double"""
        return _ndlml.CExpKern_getLengthScale(self)

    def setInitParam(self):
        """setInitParam(CExpKern self)"""
        return _ndlml.CExpKern_setInitParam(self)

    def diagComputeElement(self, *args):
        """diagComputeElement(CExpKern self, matrix X, unsigned int index) -> double"""
        return _ndlml.CExpKern_diagComputeElement(self, *args)

    def diagCompute(self, *args):
        """diagCompute(CExpKern self, matrix d, matrix X)"""
        return _ndlml.CExpKern_diagCompute(self, *args)

    def setParam(self, *args):
        """setParam(CExpKern self, double val, unsigned int paramNum)"""
        return _ndlml.CExpKern_setParam(self, *args)

    def getParam(self, *args):
        """getParam(CExpKern self, unsigned int paramNum) -> double"""
        return _ndlml.CExpKern_getParam(self, *args)

    def getGradX(self, *args):
        """
        getGradX(CExpKern self, matrix g, matrix X, unsigned int pointNo, matrix X2, bool addG=False)
        getGradX(CExpKern self, matrix g, matrix X, unsigned int pointNo, matrix X2)
        """
        return _ndlml.CExpKern_getGradX(self, *args)

    def getDiagGradX(self, *args):
        """
        getDiagGradX(CExpKern self, matrix g, matrix X, bool addG=False)
        getDiagGradX(CExpKern self, matrix g, matrix X)
        """
        return _ndlml.CExpKern_getDiagGradX(self, *args)

    def getWhite(self):
        """getWhite(CExpKern self) -> double"""
        return _ndlml.CExpKern_getWhite(self)

    def computeElement(self, *args):
        """computeElement(CExpKern self, matrix X1, unsigned int index1, matrix X2, unsigned int index2) -> double"""
        return _ndlml.CExpKern_computeElement(self, *args)

    def getGradParams(self, *args):
        """
        getGradParams(CExpKern self, matrix g, matrix X, matrix cvGrd, bool regularise=True)
        getGradParams(CExpKern self, matrix g, matrix X, matrix cvGrd)
        getGradParams(CExpKern self, matrix g, matrix X, matrix X2, matrix cvGrd, bool regularise=True)
        getGradParams(CExpKern self, matrix g, matrix X, matrix X2, matrix cvGrd)
        """
        return _ndlml.CExpKern_getGradParams(self, *args)

    def getGradParam(self, *args):
        """
        getGradParam(CExpKern self, unsigned int index, matrix X, matrix X2, matrix cvGrd) -> double
        getGradParam(CExpKern self, unsigned int index, matrix X, matrix cvGrd) -> double
        """
        return _ndlml.CExpKern_getGradParam(self, *args)

CExpKern_swigregister = _ndlml.CExpKern_swigregister
CExpKern_swigregister(CExpKern)

class ratquadKern(kern):
    """Proxy of C++ CRatQuadKern class"""
    __swig_setmethods__ = {}
    for _s in [kern]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ratquadKern, name, value)
    __swig_getmethods__ = {}
    for _s in [kern]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ratquadKern, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _ndlml.delete_ratquadKern
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(CRatQuadKern self) -> ratquadKern
        __init__(CRatQuadKern self, unsigned int inDim) -> ratquadKern
        __init__(CRatQuadKern self, matrix X) -> ratquadKern
        __init__(CRatQuadKern self, ratquadKern arg2) -> ratquadKern
        """
        this = _ndlml.new_ratquadKern(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """clone(ratquadKern self) -> ratquadKern"""
        return _ndlml.ratquadKern_clone(self)

    def getVariance(self):
        """getVariance(ratquadKern self) -> double"""
        return _ndlml.ratquadKern_getVariance(self)

    def setVariance(self, *args):
        """setVariance(ratquadKern self, double val)"""
        return _ndlml.ratquadKern_setVariance(self, *args)

    def setInitParam(self):
        """setInitParam(ratquadKern self)"""
        return _ndlml.ratquadKern_setInitParam(self)

    def diagComputeElement(self, *args):
        """diagComputeElement(ratquadKern self, matrix X, unsigned int index) -> double"""
        return _ndlml.ratquadKern_diagComputeElement(self, *args)

    def diagCompute(self, *args):
        """diagCompute(ratquadKern self, matrix d, matrix X)"""
        return _ndlml.ratquadKern_diagCompute(self, *args)

    def setParam(self, *args):
        """setParam(ratquadKern self, double val, unsigned int paramNum)"""
        return _ndlml.ratquadKern_setParam(self, *args)

    def getParam(self, *args):
        """getParam(ratquadKern self, unsigned int paramNum) -> double"""
        return _ndlml.ratquadKern_getParam(self, *args)

    def getGradX(self, *args):
        """
        getGradX(ratquadKern self, matrix g, matrix X, unsigned int pointNo, matrix X2, bool addG=False)
        getGradX(ratquadKern self, matrix g, matrix X, unsigned int pointNo, matrix X2)
        """
        return _ndlml.ratquadKern_getGradX(self, *args)

    def getDiagGradX(self, *args):
        """
        getDiagGradX(ratquadKern self, matrix g, matrix X, bool addG=False)
        getDiagGradX(ratquadKern self, matrix g, matrix X)
        """
        return _ndlml.ratquadKern_getDiagGradX(self, *args)

    def getWhite(self):
        """getWhite(ratquadKern self) -> double"""
        return _ndlml.ratquadKern_getWhite(self)

    def computeElement(self, *args):
        """computeElement(ratquadKern self, matrix X1, unsigned int index1, matrix X2, unsigned int index2) -> double"""
        return _ndlml.ratquadKern_computeElement(self, *args)

    def getGradParams(self, *args):
        """
        getGradParams(ratquadKern self, matrix g, matrix X, matrix cvGrd, bool regularise=True)
        getGradParams(ratquadKern self, matrix g, matrix X, matrix cvGrd)
        getGradParams(ratquadKern self, matrix g, matrix X, matrix X2, matrix cvGrd, bool regularise=True)
        getGradParams(ratquadKern self, matrix g, matrix X, matrix X2, matrix cvGrd)
        """
        return _ndlml.ratquadKern_getGradParams(self, *args)

    def getGradParam(self, *args):
        """
        getGradParam(ratquadKern self, unsigned int index, matrix X, matrix X2, matrix cvGrd) -> double
        getGradParam(ratquadKern self, unsigned int index, matrix X, matrix cvGrd) -> double
        """
        return _ndlml.ratquadKern_getGradParam(self, *args)

    def updateX(self, *args):
        """updateX(ratquadKern self, matrix X)"""
        return _ndlml.ratquadKern_updateX(self, *args)

ratquadKern_swigregister = _ndlml.ratquadKern_swigregister
ratquadKern_swigregister(ratquadKern)

class matern32Kern(kern):
    """Proxy of C++ CMatern32Kern class"""
    __swig_setmethods__ = {}
    for _s in [kern]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, matern32Kern, name, value)
    __swig_getmethods__ = {}
    for _s in [kern]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, matern32Kern, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _ndlml.delete_matern32Kern
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(CMatern32Kern self) -> matern32Kern
        __init__(CMatern32Kern self, unsigned int inDim) -> matern32Kern
        __init__(CMatern32Kern self, matrix X) -> matern32Kern
        __init__(CMatern32Kern self, matern32Kern arg2) -> matern32Kern
        """
        this = _ndlml.new_matern32Kern(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """clone(matern32Kern self) -> matern32Kern"""
        return _ndlml.matern32Kern_clone(self)

    def getVariance(self):
        """getVariance(matern32Kern self) -> double"""
        return _ndlml.matern32Kern_getVariance(self)

    def setVariance(self, *args):
        """setVariance(matern32Kern self, double val)"""
        return _ndlml.matern32Kern_setVariance(self, *args)

    def setInitParam(self):
        """setInitParam(matern32Kern self)"""
        return _ndlml.matern32Kern_setInitParam(self)

    def diagComputeElement(self, *args):
        """diagComputeElement(matern32Kern self, matrix X, unsigned int index) -> double"""
        return _ndlml.matern32Kern_diagComputeElement(self, *args)

    def diagCompute(self, *args):
        """diagCompute(matern32Kern self, matrix d, matrix X)"""
        return _ndlml.matern32Kern_diagCompute(self, *args)

    def setParam(self, *args):
        """setParam(matern32Kern self, double val, unsigned int paramNum)"""
        return _ndlml.matern32Kern_setParam(self, *args)

    def getParam(self, *args):
        """getParam(matern32Kern self, unsigned int paramNum) -> double"""
        return _ndlml.matern32Kern_getParam(self, *args)

    def getGradX(self, *args):
        """
        getGradX(matern32Kern self, matrix g, matrix X, unsigned int pointNo, matrix X2, bool addG=False)
        getGradX(matern32Kern self, matrix g, matrix X, unsigned int pointNo, matrix X2)
        """
        return _ndlml.matern32Kern_getGradX(self, *args)

    def getDiagGradX(self, *args):
        """
        getDiagGradX(matern32Kern self, matrix g, matrix X, bool addG=False)
        getDiagGradX(matern32Kern self, matrix g, matrix X)
        """
        return _ndlml.matern32Kern_getDiagGradX(self, *args)

    def getWhite(self):
        """getWhite(matern32Kern self) -> double"""
        return _ndlml.matern32Kern_getWhite(self)

    def computeElement(self, *args):
        """computeElement(matern32Kern self, matrix X1, unsigned int index1, matrix X2, unsigned int index2) -> double"""
        return _ndlml.matern32Kern_computeElement(self, *args)

    def getGradParams(self, *args):
        """
        getGradParams(matern32Kern self, matrix g, matrix X, matrix cvGrd, bool regularise=True)
        getGradParams(matern32Kern self, matrix g, matrix X, matrix cvGrd)
        getGradParams(matern32Kern self, matrix g, matrix X, matrix X2, matrix cvGrd, bool regularise=True)
        getGradParams(matern32Kern self, matrix g, matrix X, matrix X2, matrix cvGrd)
        """
        return _ndlml.matern32Kern_getGradParams(self, *args)

    def getGradParam(self, *args):
        """
        getGradParam(matern32Kern self, unsigned int index, matrix X, matrix X2, matrix cvGrd) -> double
        getGradParam(matern32Kern self, unsigned int index, matrix X, matrix cvGrd) -> double
        """
        return _ndlml.matern32Kern_getGradParam(self, *args)

    def updateX(self, *args):
        """updateX(matern32Kern self, matrix X)"""
        return _ndlml.matern32Kern_updateX(self, *args)

matern32Kern_swigregister = _ndlml.matern32Kern_swigregister
matern32Kern_swigregister(matern32Kern)

class matern52Kern(kern):
    """Proxy of C++ CMatern52Kern class"""
    __swig_setmethods__ = {}
    for _s in [kern]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, matern52Kern, name, value)
    __swig_getmethods__ = {}
    for _s in [kern]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, matern52Kern, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _ndlml.delete_matern52Kern
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(CMatern52Kern self) -> matern52Kern
        __init__(CMatern52Kern self, unsigned int inDim) -> matern52Kern
        __init__(CMatern52Kern self, matrix X) -> matern52Kern
        __init__(CMatern52Kern self, matern52Kern arg2) -> matern52Kern
        """
        this = _ndlml.new_matern52Kern(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """clone(matern52Kern self) -> matern52Kern"""
        return _ndlml.matern52Kern_clone(self)

    def getVariance(self):
        """getVariance(matern52Kern self) -> double"""
        return _ndlml.matern52Kern_getVariance(self)

    def setVariance(self, *args):
        """setVariance(matern52Kern self, double val)"""
        return _ndlml.matern52Kern_setVariance(self, *args)

    def setInitParam(self):
        """setInitParam(matern52Kern self)"""
        return _ndlml.matern52Kern_setInitParam(self)

    def diagComputeElement(self, *args):
        """diagComputeElement(matern52Kern self, matrix X, unsigned int index) -> double"""
        return _ndlml.matern52Kern_diagComputeElement(self, *args)

    def diagCompute(self, *args):
        """diagCompute(matern52Kern self, matrix d, matrix X)"""
        return _ndlml.matern52Kern_diagCompute(self, *args)

    def setParam(self, *args):
        """setParam(matern52Kern self, double val, unsigned int paramNum)"""
        return _ndlml.matern52Kern_setParam(self, *args)

    def getParam(self, *args):
        """getParam(matern52Kern self, unsigned int paramNum) -> double"""
        return _ndlml.matern52Kern_getParam(self, *args)

    def getGradX(self, *args):
        """
        getGradX(matern52Kern self, matrix g, matrix X, unsigned int pointNo, matrix X2, bool addG=False)
        getGradX(matern52Kern self, matrix g, matrix X, unsigned int pointNo, matrix X2)
        """
        return _ndlml.matern52Kern_getGradX(self, *args)

    def getDiagGradX(self, *args):
        """
        getDiagGradX(matern52Kern self, matrix g, matrix X, bool addG=False)
        getDiagGradX(matern52Kern self, matrix g, matrix X)
        """
        return _ndlml.matern52Kern_getDiagGradX(self, *args)

    def getWhite(self):
        """getWhite(matern52Kern self) -> double"""
        return _ndlml.matern52Kern_getWhite(self)

    def computeElement(self, *args):
        """computeElement(matern52Kern self, matrix X1, unsigned int index1, matrix X2, unsigned int index2) -> double"""
        return _ndlml.matern52Kern_computeElement(self, *args)

    def getGradParams(self, *args):
        """
        getGradParams(matern52Kern self, matrix g, matrix X, matrix cvGrd, bool regularise=True)
        getGradParams(matern52Kern self, matrix g, matrix X, matrix cvGrd)
        getGradParams(matern52Kern self, matrix g, matrix X, matrix X2, matrix cvGrd, bool regularise=True)
        getGradParams(matern52Kern self, matrix g, matrix X, matrix X2, matrix cvGrd)
        """
        return _ndlml.matern52Kern_getGradParams(self, *args)

    def getGradParam(self, *args):
        """
        getGradParam(matern52Kern self, unsigned int index, matrix X, matrix X2, matrix cvGrd) -> double
        getGradParam(matern52Kern self, unsigned int index, matrix X, matrix cvGrd) -> double
        """
        return _ndlml.matern52Kern_getGradParam(self, *args)

    def updateX(self, *args):
        """updateX(matern52Kern self, matrix X)"""
        return _ndlml.matern52Kern_updateX(self, *args)

matern52Kern_swigregister = _ndlml.matern52Kern_swigregister
matern52Kern_swigregister(matern52Kern)

class linKern(kern):
    """Proxy of C++ CLinKern class"""
    __swig_setmethods__ = {}
    for _s in [kern]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, linKern, name, value)
    __swig_getmethods__ = {}
    for _s in [kern]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, linKern, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _ndlml.delete_linKern
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(CLinKern self) -> linKern
        __init__(CLinKern self, unsigned int inDim) -> linKern
        __init__(CLinKern self, matrix X) -> linKern
        __init__(CLinKern self, linKern arg2) -> linKern
        """
        this = _ndlml.new_linKern(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """clone(linKern self) -> linKern"""
        return _ndlml.linKern_clone(self)

    def getVariance(self):
        """getVariance(linKern self) -> double"""
        return _ndlml.linKern_getVariance(self)

    def setVariance(self, *args):
        """setVariance(linKern self, double val)"""
        return _ndlml.linKern_setVariance(self, *args)

    def setInitParam(self):
        """setInitParam(linKern self)"""
        return _ndlml.linKern_setInitParam(self)

    def diagComputeElement(self, *args):
        """diagComputeElement(linKern self, matrix X, unsigned int index) -> double"""
        return _ndlml.linKern_diagComputeElement(self, *args)

    def setParam(self, *args):
        """setParam(linKern self, double val, unsigned int paramNum)"""
        return _ndlml.linKern_setParam(self, *args)

    def getParam(self, *args):
        """getParam(linKern self, unsigned int paramNum) -> double"""
        return _ndlml.linKern_getParam(self, *args)

    def getGradX(self, *args):
        """
        getGradX(linKern self, matrix g, matrix X, unsigned int pointNo, matrix X2, bool addG=False)
        getGradX(linKern self, matrix g, matrix X, unsigned int pointNo, matrix X2)
        """
        return _ndlml.linKern_getGradX(self, *args)

    def getDiagGradX(self, *args):
        """
        getDiagGradX(linKern self, matrix g, matrix X, bool addG=False)
        getDiagGradX(linKern self, matrix g, matrix X)
        """
        return _ndlml.linKern_getDiagGradX(self, *args)

    def getWhite(self):
        """getWhite(linKern self) -> double"""
        return _ndlml.linKern_getWhite(self)

    def computeElement(self, *args):
        """computeElement(linKern self, matrix X1, unsigned int index1, matrix X2, unsigned int index2) -> double"""
        return _ndlml.linKern_computeElement(self, *args)

    def compute(self, *args):
        """
        compute(linKern self, matrix K, matrix X)
        compute(linKern self, matrix K, matrix X, matrix X2)
        compute(linKern self, matrix K, matrix X, matrix X2, unsigned int row)
        """
        return _ndlml.linKern_compute(self, *args)

    def getGradParam(self, *args):
        """
        getGradParam(linKern self, unsigned int index, matrix X, matrix X2, matrix cvGrd) -> double
        getGradParam(linKern self, unsigned int index, matrix X, matrix cvGrd) -> double
        """
        return _ndlml.linKern_getGradParam(self, *args)

linKern_swigregister = _ndlml.linKern_swigregister
linKern_swigregister(linKern)

class mlpKern(kern):
    """Proxy of C++ CMlpKern class"""
    __swig_setmethods__ = {}
    for _s in [kern]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, mlpKern, name, value)
    __swig_getmethods__ = {}
    for _s in [kern]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, mlpKern, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _ndlml.delete_mlpKern
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(CMlpKern self) -> mlpKern
        __init__(CMlpKern self, unsigned int inDim) -> mlpKern
        __init__(CMlpKern self, matrix X) -> mlpKern
        __init__(CMlpKern self, mlpKern arg2) -> mlpKern
        """
        this = _ndlml.new_mlpKern(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """clone(mlpKern self) -> mlpKern"""
        return _ndlml.mlpKern_clone(self)

    def getVariance(self):
        """getVariance(mlpKern self) -> double"""
        return _ndlml.mlpKern_getVariance(self)

    def setVariance(self, *args):
        """setVariance(mlpKern self, double val)"""
        return _ndlml.mlpKern_setVariance(self, *args)

    def setInitParam(self):
        """setInitParam(mlpKern self)"""
        return _ndlml.mlpKern_setInitParam(self)

    def diagComputeElement(self, *args):
        """diagComputeElement(mlpKern self, matrix X, unsigned int index) -> double"""
        return _ndlml.mlpKern_diagComputeElement(self, *args)

    def setParam(self, *args):
        """setParam(mlpKern self, double val, unsigned int paramNum)"""
        return _ndlml.mlpKern_setParam(self, *args)

    def getParam(self, *args):
        """getParam(mlpKern self, unsigned int paramNum) -> double"""
        return _ndlml.mlpKern_getParam(self, *args)

    def getGradX(self, *args):
        """
        getGradX(mlpKern self, matrix g, matrix X, unsigned int pointNo, matrix X2, bool addG=False)
        getGradX(mlpKern self, matrix g, matrix X, unsigned int pointNo, matrix X2)
        """
        return _ndlml.mlpKern_getGradX(self, *args)

    def getDiagGradX(self, *args):
        """
        getDiagGradX(mlpKern self, matrix g, matrix X, bool addG=False)
        getDiagGradX(mlpKern self, matrix g, matrix X)
        """
        return _ndlml.mlpKern_getDiagGradX(self, *args)

    def getWhite(self):
        """getWhite(mlpKern self) -> double"""
        return _ndlml.mlpKern_getWhite(self)

    def computeElement(self, *args):
        """computeElement(mlpKern self, matrix X1, unsigned int index1, matrix X2, unsigned int index2) -> double"""
        return _ndlml.mlpKern_computeElement(self, *args)

    def getGradParams(self, *args):
        """
        getGradParams(mlpKern self, matrix g, matrix X, matrix X2, matrix cvGrd, bool regularise=True)
        getGradParams(mlpKern self, matrix g, matrix X, matrix X2, matrix cvGrd)
        getGradParams(mlpKern self, matrix g, matrix X, matrix cvGrd, bool regularise=True)
        getGradParams(mlpKern self, matrix g, matrix X, matrix cvGrd)
        """
        return _ndlml.mlpKern_getGradParams(self, *args)

    def getGradParam(self, *args):
        """
        getGradParam(mlpKern self, unsigned int index, matrix X, matrix X2, matrix cvGrd) -> double
        getGradParam(mlpKern self, unsigned int index, matrix X, matrix cvGrd) -> double
        """
        return _ndlml.mlpKern_getGradParam(self, *args)

mlpKern_swigregister = _ndlml.mlpKern_swigregister
mlpKern_swigregister(mlpKern)

class polyKern(kern):
    """Proxy of C++ CPolyKern class"""
    __swig_setmethods__ = {}
    for _s in [kern]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, polyKern, name, value)
    __swig_getmethods__ = {}
    for _s in [kern]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, polyKern, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _ndlml.delete_polyKern
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(CPolyKern self) -> polyKern
        __init__(CPolyKern self, unsigned int inDim) -> polyKern
        __init__(CPolyKern self, matrix X) -> polyKern
        __init__(CPolyKern self, polyKern arg2) -> polyKern
        """
        this = _ndlml.new_polyKern(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """clone(polyKern self) -> polyKern"""
        return _ndlml.polyKern_clone(self)

    def setDegree(self, *args):
        """setDegree(polyKern self, double val)"""
        return _ndlml.polyKern_setDegree(self, *args)

    def getDegree(self):
        """getDegree(polyKern self) -> double"""
        return _ndlml.polyKern_getDegree(self)

    def getVariance(self):
        """getVariance(polyKern self) -> double"""
        return _ndlml.polyKern_getVariance(self)

    def setVariance(self, *args):
        """setVariance(polyKern self, double val)"""
        return _ndlml.polyKern_setVariance(self, *args)

    def setInitParam(self):
        """setInitParam(polyKern self)"""
        return _ndlml.polyKern_setInitParam(self)

    def diagComputeElement(self, *args):
        """diagComputeElement(polyKern self, matrix X, unsigned int index) -> double"""
        return _ndlml.polyKern_diagComputeElement(self, *args)

    def setParam(self, *args):
        """setParam(polyKern self, double val, unsigned int paramNum)"""
        return _ndlml.polyKern_setParam(self, *args)

    def getParam(self, *args):
        """getParam(polyKern self, unsigned int paramNum) -> double"""
        return _ndlml.polyKern_getParam(self, *args)

    def getGradX(self, *args):
        """
        getGradX(polyKern self, matrix g, matrix X, unsigned int pointNo, matrix X2, bool addG=False)
        getGradX(polyKern self, matrix g, matrix X, unsigned int pointNo, matrix X2)
        """
        return _ndlml.polyKern_getGradX(self, *args)

    def getDiagGradX(self, *args):
        """
        getDiagGradX(polyKern self, matrix g, matrix X, bool addG=False)
        getDiagGradX(polyKern self, matrix g, matrix X)
        """
        return _ndlml.polyKern_getDiagGradX(self, *args)

    def getWhite(self):
        """getWhite(polyKern self) -> double"""
        return _ndlml.polyKern_getWhite(self)

    def computeElement(self, *args):
        """computeElement(polyKern self, matrix X1, unsigned int index1, matrix X2, unsigned int index2) -> double"""
        return _ndlml.polyKern_computeElement(self, *args)

    def getGradParams(self, *args):
        """
        getGradParams(polyKern self, matrix g, matrix X, matrix X2, matrix cvGrd, bool regularise=True)
        getGradParams(polyKern self, matrix g, matrix X, matrix X2, matrix cvGrd)
        getGradParams(polyKern self, matrix g, matrix X, matrix cvGrd, bool regularise=True)
        getGradParams(polyKern self, matrix g, matrix X, matrix cvGrd)
        """
        return _ndlml.polyKern_getGradParams(self, *args)

    def getGradParam(self, *args):
        """
        getGradParam(polyKern self, unsigned int index, matrix X, matrix X2, matrix cvGrd) -> double
        getGradParam(polyKern self, unsigned int index, matrix X, matrix cvGrd) -> double
        """
        return _ndlml.polyKern_getGradParam(self, *args)

    def writeParamsToStream(self, *args):
        """writeParamsToStream(polyKern self, ostream & out)"""
        return _ndlml.polyKern_writeParamsToStream(self, *args)

    def readParamsFromStream(self, *args):
        """readParamsFromStream(polyKern self, istream & _in)"""
        return _ndlml.polyKern_readParamsFromStream(self, *args)

polyKern_swigregister = _ndlml.polyKern_swigregister
polyKern_swigregister(polyKern)

class linardKern(CArdKern):
    """Proxy of C++ CLinardKern class"""
    __swig_setmethods__ = {}
    for _s in [CArdKern]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, linardKern, name, value)
    __swig_getmethods__ = {}
    for _s in [CArdKern]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, linardKern, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _ndlml.delete_linardKern
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(CLinardKern self) -> linardKern
        __init__(CLinardKern self, unsigned int inDim) -> linardKern
        __init__(CLinardKern self, matrix X) -> linardKern
        __init__(CLinardKern self, linardKern arg2) -> linardKern
        """
        this = _ndlml.new_linardKern(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """clone(linardKern self) -> linardKern"""
        return _ndlml.linardKern_clone(self)

    def getVariance(self):
        """getVariance(linardKern self) -> double"""
        return _ndlml.linardKern_getVariance(self)

    def setVariance(self, *args):
        """setVariance(linardKern self, double val)"""
        return _ndlml.linardKern_setVariance(self, *args)

    def setInitParam(self):
        """setInitParam(linardKern self)"""
        return _ndlml.linardKern_setInitParam(self)

    def diagComputeElement(self, *args):
        """diagComputeElement(linardKern self, matrix X, unsigned int index) -> double"""
        return _ndlml.linardKern_diagComputeElement(self, *args)

    def setParam(self, *args):
        """setParam(linardKern self, double val, unsigned int paramNum)"""
        return _ndlml.linardKern_setParam(self, *args)

    def getParam(self, *args):
        """getParam(linardKern self, unsigned int paramNum) -> double"""
        return _ndlml.linardKern_getParam(self, *args)

    def getGradX(self, *args):
        """
        getGradX(linardKern self, matrix g, matrix X, unsigned int pointNo, matrix X2, bool addG=False)
        getGradX(linardKern self, matrix g, matrix X, unsigned int pointNo, matrix X2)
        """
        return _ndlml.linardKern_getGradX(self, *args)

    def getDiagGradX(self, *args):
        """
        getDiagGradX(linardKern self, matrix g, matrix X, bool addGrad=False)
        getDiagGradX(linardKern self, matrix g, matrix X)
        """
        return _ndlml.linardKern_getDiagGradX(self, *args)

    def getWhite(self):
        """getWhite(linardKern self) -> double"""
        return _ndlml.linardKern_getWhite(self)

    def computeElement(self, *args):
        """computeElement(linardKern self, matrix X1, unsigned int index1, matrix X2, unsigned int index2) -> double"""
        return _ndlml.linardKern_computeElement(self, *args)

    def getGradParams(self, *args):
        """
        getGradParams(linardKern self, matrix g, matrix X, matrix X2, matrix cvGrd, bool regularise=True)
        getGradParams(linardKern self, matrix g, matrix X, matrix X2, matrix cvGrd)
        getGradParams(linardKern self, matrix g, matrix X, matrix cvGrd, bool regularise=True)
        getGradParams(linardKern self, matrix g, matrix X, matrix cvGrd)
        """
        return _ndlml.linardKern_getGradParams(self, *args)

    def getGradParam(self, *args):
        """
        getGradParam(linardKern self, unsigned int index, matrix X, matrix X2, matrix cvGrd) -> double
        getGradParam(linardKern self, unsigned int index, matrix X, matrix cvGrd) -> double
        """
        return _ndlml.linardKern_getGradParam(self, *args)

linardKern_swigregister = _ndlml.linardKern_swigregister
linardKern_swigregister(linardKern)

class rbfardKern(CArdKern):
    """Proxy of C++ CRbfardKern class"""
    __swig_setmethods__ = {}
    for _s in [CArdKern]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, rbfardKern, name, value)
    __swig_getmethods__ = {}
    for _s in [CArdKern]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, rbfardKern, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _ndlml.delete_rbfardKern
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(CRbfardKern self) -> rbfardKern
        __init__(CRbfardKern self, unsigned int inDim) -> rbfardKern
        __init__(CRbfardKern self, matrix X) -> rbfardKern
        __init__(CRbfardKern self, rbfardKern arg2) -> rbfardKern
        """
        this = _ndlml.new_rbfardKern(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """clone(rbfardKern self) -> rbfardKern"""
        return _ndlml.rbfardKern_clone(self)

    def getVariance(self):
        """getVariance(rbfardKern self) -> double"""
        return _ndlml.rbfardKern_getVariance(self)

    def setVariance(self, *args):
        """setVariance(rbfardKern self, double val)"""
        return _ndlml.rbfardKern_setVariance(self, *args)

    def setInitParam(self):
        """setInitParam(rbfardKern self)"""
        return _ndlml.rbfardKern_setInitParam(self)

    def diagComputeElement(self, *args):
        """diagComputeElement(rbfardKern self, matrix X, unsigned int index) -> double"""
        return _ndlml.rbfardKern_diagComputeElement(self, *args)

    def setParam(self, *args):
        """setParam(rbfardKern self, double val, unsigned int paramNum)"""
        return _ndlml.rbfardKern_setParam(self, *args)

    def getParam(self, *args):
        """getParam(rbfardKern self, unsigned int paramNum) -> double"""
        return _ndlml.rbfardKern_getParam(self, *args)

    def getGradX(self, *args):
        """
        getGradX(rbfardKern self, matrix g, matrix X, unsigned int pointNo, matrix X2, bool addG=False)
        getGradX(rbfardKern self, matrix g, matrix X, unsigned int pointNo, matrix X2)
        """
        return _ndlml.rbfardKern_getGradX(self, *args)

    def getDiagGradX(self, *args):
        """
        getDiagGradX(rbfardKern self, matrix g, matrix X, bool addGrad=False)
        getDiagGradX(rbfardKern self, matrix g, matrix X)
        """
        return _ndlml.rbfardKern_getDiagGradX(self, *args)

    def getWhite(self):
        """getWhite(rbfardKern self) -> double"""
        return _ndlml.rbfardKern_getWhite(self)

    def computeElement(self, *args):
        """computeElement(rbfardKern self, matrix X1, unsigned int index1, matrix X2, unsigned int index2) -> double"""
        return _ndlml.rbfardKern_computeElement(self, *args)

    def getGradParams(self, *args):
        """
        getGradParams(rbfardKern self, matrix g, matrix X, matrix X2, matrix cvGrd, bool regularise=True)
        getGradParams(rbfardKern self, matrix g, matrix X, matrix X2, matrix cvGrd)
        getGradParams(rbfardKern self, matrix g, matrix X, matrix cvGrd, bool regularise=True)
        getGradParams(rbfardKern self, matrix g, matrix X, matrix cvGrd)
        """
        return _ndlml.rbfardKern_getGradParams(self, *args)

    def getGradParam(self, *args):
        """
        getGradParam(rbfardKern self, unsigned int index, matrix X, matrix X2, matrix cvGrd) -> double
        getGradParam(rbfardKern self, unsigned int index, matrix X, matrix cvGrd) -> double
        """
        return _ndlml.rbfardKern_getGradParam(self, *args)

rbfardKern_swigregister = _ndlml.rbfardKern_swigregister
rbfardKern_swigregister(rbfardKern)

class mlpardKern(CArdKern):
    """Proxy of C++ CMlpardKern class"""
    __swig_setmethods__ = {}
    for _s in [CArdKern]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, mlpardKern, name, value)
    __swig_getmethods__ = {}
    for _s in [CArdKern]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, mlpardKern, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _ndlml.delete_mlpardKern
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(CMlpardKern self) -> mlpardKern
        __init__(CMlpardKern self, unsigned int inDim) -> mlpardKern
        __init__(CMlpardKern self, matrix X) -> mlpardKern
        __init__(CMlpardKern self, mlpardKern arg2) -> mlpardKern
        """
        this = _ndlml.new_mlpardKern(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """clone(mlpardKern self) -> mlpardKern"""
        return _ndlml.mlpardKern_clone(self)

    def getVariance(self):
        """getVariance(mlpardKern self) -> double"""
        return _ndlml.mlpardKern_getVariance(self)

    def setVariance(self, *args):
        """setVariance(mlpardKern self, double val)"""
        return _ndlml.mlpardKern_setVariance(self, *args)

    def setInitParam(self):
        """setInitParam(mlpardKern self)"""
        return _ndlml.mlpardKern_setInitParam(self)

    def diagComputeElement(self, *args):
        """diagComputeElement(mlpardKern self, matrix X, unsigned int index) -> double"""
        return _ndlml.mlpardKern_diagComputeElement(self, *args)

    def setParam(self, *args):
        """setParam(mlpardKern self, double val, unsigned int paramNum)"""
        return _ndlml.mlpardKern_setParam(self, *args)

    def getParam(self, *args):
        """getParam(mlpardKern self, unsigned int paramNum) -> double"""
        return _ndlml.mlpardKern_getParam(self, *args)

    def getGradX(self, *args):
        """
        getGradX(mlpardKern self, matrix g, matrix X, unsigned int pointNo, matrix X2, bool addG=False)
        getGradX(mlpardKern self, matrix g, matrix X, unsigned int pointNo, matrix X2)
        """
        return _ndlml.mlpardKern_getGradX(self, *args)

    def getDiagGradX(self, *args):
        """
        getDiagGradX(mlpardKern self, matrix g, matrix X, bool addGrad=False)
        getDiagGradX(mlpardKern self, matrix g, matrix X)
        """
        return _ndlml.mlpardKern_getDiagGradX(self, *args)

    def getWhite(self):
        """getWhite(mlpardKern self) -> double"""
        return _ndlml.mlpardKern_getWhite(self)

    def computeElement(self, *args):
        """computeElement(mlpardKern self, matrix X1, unsigned int index1, matrix X2, unsigned int index2) -> double"""
        return _ndlml.mlpardKern_computeElement(self, *args)

    def getGradParams(self, *args):
        """
        getGradParams(mlpardKern self, matrix g, matrix X, matrix X2, matrix cvGrd, bool regularise=True)
        getGradParams(mlpardKern self, matrix g, matrix X, matrix X2, matrix cvGrd)
        getGradParams(mlpardKern self, matrix g, matrix X, matrix cvGrd, bool regularise=True)
        getGradParams(mlpardKern self, matrix g, matrix X, matrix cvGrd)
        """
        return _ndlml.mlpardKern_getGradParams(self, *args)

    def getGradParam(self, *args):
        """
        getGradParam(mlpardKern self, unsigned int index, matrix X, matrix X2, matrix cvGrd) -> double
        getGradParam(mlpardKern self, unsigned int index, matrix X, matrix cvGrd) -> double
        """
        return _ndlml.mlpardKern_getGradParam(self, *args)

mlpardKern_swigregister = _ndlml.mlpardKern_swigregister
mlpardKern_swigregister(mlpardKern)

class polyardKern(CArdKern):
    """Proxy of C++ CPolyardKern class"""
    __swig_setmethods__ = {}
    for _s in [CArdKern]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, polyardKern, name, value)
    __swig_getmethods__ = {}
    for _s in [CArdKern]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, polyardKern, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _ndlml.delete_polyardKern
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(CPolyardKern self) -> polyardKern
        __init__(CPolyardKern self, unsigned int inDim) -> polyardKern
        __init__(CPolyardKern self, matrix X) -> polyardKern
        __init__(CPolyardKern self, polyardKern arg2) -> polyardKern
        """
        this = _ndlml.new_polyardKern(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self):
        """clone(polyardKern self) -> polyardKern"""
        return _ndlml.polyardKern_clone(self)

    def setDegree(self, *args):
        """setDegree(polyardKern self, double val)"""
        return _ndlml.polyardKern_setDegree(self, *args)

    def getDegree(self):
        """getDegree(polyardKern self) -> double"""
        return _ndlml.polyardKern_getDegree(self)

    def getVariance(self):
        """getVariance(polyardKern self) -> double"""
        return _ndlml.polyardKern_getVariance(self)

    def setVariance(self, *args):
        """setVariance(polyardKern self, double val)"""
        return _ndlml.polyardKern_setVariance(self, *args)

    def setInitParam(self):
        """setInitParam(polyardKern self)"""
        return _ndlml.polyardKern_setInitParam(self)

    def diagComputeElement(self, *args):
        """diagComputeElement(polyardKern self, matrix X, unsigned int index) -> double"""
        return _ndlml.polyardKern_diagComputeElement(self, *args)

    def setParam(self, *args):
        """setParam(polyardKern self, double val, unsigned int paramNum)"""
        return _ndlml.polyardKern_setParam(self, *args)

    def getParam(self, *args):
        """getParam(polyardKern self, unsigned int paramNum) -> double"""
        return _ndlml.polyardKern_getParam(self, *args)

    def getGradX(self, *args):
        """
        getGradX(polyardKern self, matrix g, matrix X, unsigned int pointNo, matrix X2, bool addG=False)
        getGradX(polyardKern self, matrix g, matrix X, unsigned int pointNo, matrix X2)
        """
        return _ndlml.polyardKern_getGradX(self, *args)

    def getDiagGradX(self, *args):
        """
        getDiagGradX(polyardKern self, matrix g, matrix X, bool addGrad=False)
        getDiagGradX(polyardKern self, matrix g, matrix X)
        """
        return _ndlml.polyardKern_getDiagGradX(self, *args)

    def getWhite(self):
        """getWhite(polyardKern self) -> double"""
        return _ndlml.polyardKern_getWhite(self)

    def computeElement(self, *args):
        """computeElement(polyardKern self, matrix X1, unsigned int index1, matrix X2, unsigned int index2) -> double"""
        return _ndlml.polyardKern_computeElement(self, *args)

    def getGradParams(self, *args):
        """
        getGradParams(polyardKern self, matrix g, matrix X, matrix X2, matrix cvGrd, bool regularise=True)
        getGradParams(polyardKern self, matrix g, matrix X, matrix X2, matrix cvGrd)
        getGradParams(polyardKern self, matrix g, matrix X, matrix cvGrd, bool regularise=True)
        getGradParams(polyardKern self, matrix g, matrix X, matrix cvGrd)
        """
        return _ndlml.polyardKern_getGradParams(self, *args)

    def getGradParam(self, *args):
        """
        getGradParam(polyardKern self, unsigned int index, matrix X, matrix X2, matrix cvGrd) -> double
        getGradParam(polyardKern self, unsigned int index, matrix X, matrix cvGrd) -> double
        """
        return _ndlml.polyardKern_getGradParam(self, *args)

    def writeParamsToStream(self, *args):
        """writeParamsToStream(polyardKern self, ostream & out)"""
        return _ndlml.polyardKern_writeParamsToStream(self, *args)

    def readParamsFromStream(self, *args):
        """readParamsFromStream(polyardKern self, istream & _in)"""
        return _ndlml.polyardKern_readParamsFromStream(self, *args)

polyardKern_swigregister = _ndlml.polyardKern_swigregister
polyardKern_swigregister(polyardKern)


def writeKernToStream(*args):
  """writeKernToStream(kern kern, ostream & out)"""
  return _ndlml.writeKernToStream(*args)

def readKernFromStream(*args):
  """readKernFromStream(istream & _in) -> kern"""
  return _ndlml.readKernFromStream(*args)
class linearMapping(CMapModel,COptimisable,CStreamInterface,CMatInterface):
    """Proxy of C++ CLinearMapping class"""
    __swig_setmethods__ = {}
    for _s in [CMapModel,COptimisable,CStreamInterface,CMatInterface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, linearMapping, name, value)
    __swig_getmethods__ = {}
    for _s in [CMapModel,COptimisable,CStreamInterface,CMatInterface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, linearMapping, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(CLinearMapping self) -> linearMapping
        __init__(CLinearMapping self, matrix pXin, matrix pyOut, int verbos=2) -> linearMapping
        __init__(CLinearMapping self, matrix pXin, matrix pyOut) -> linearMapping
        """
        this = _ndlml.new_linearMapping(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ndlml.delete_linearMapping
    __del__ = lambda self : None;
    def clone(self):
        """clone(linearMapping self) -> linearMapping"""
        return _ndlml.linearMapping_clone(self)

    def initStoreage(self):
        """initStoreage(linearMapping self)"""
        return _ndlml.linearMapping_initStoreage(self)

    def initVals(self):
        """initVals(linearMapping self)"""
        return _ndlml.linearMapping_initVals(self)

    def out(self, *args):
        """out(linearMapping self, matrix yPred, matrix inData)"""
        return _ndlml.linearMapping_out(self, *args)

    def outGradParams(self, *args):
        """outGradParams(linearMapping self, matrix g, matrix inData, unsigned int i, unsigned int j) -> double"""
        return _ndlml.linearMapping_outGradParams(self, *args)

    def outGradX(self, *args):
        """outGradX(linearMapping self, matrix g, matrix inData, unsigned int i, unsigned int j) -> double"""
        return _ndlml.linearMapping_outGradX(self, *args)

    def setWeights(self, *args):
        """setWeights(linearMapping self, matrix W, unsigned int layer)"""
        return _ndlml.linearMapping_setWeights(self, *args)

    def setBias(self, *args):
        """setBias(linearMapping self, matrix b, unsigned int layer)"""
        return _ndlml.linearMapping_setBias(self, *args)

    def logLikelihood(self):
        """logLikelihood(linearMapping self) -> double"""
        return _ndlml.linearMapping_logLikelihood(self)

    def logLikelihoodGradient(self, *args):
        """logLikelihoodGradient(linearMapping self, matrix g) -> double"""
        return _ndlml.linearMapping_logLikelihoodGradient(self, *args)

    def updateG(self):
        """updateG(linearMapping self)"""
        return _ndlml.linearMapping_updateG(self)

    def pointLogLikelihood(self, *args):
        """pointLogLikelihood(linearMapping self, matrix yOut, matrix Xin) -> double"""
        return _ndlml.linearMapping_pointLogLikelihood(self, *args)

    def display(self, *args):
        """display(linearMapping self, ostream & os)"""
        return _ndlml.linearMapping_display(self, *args)

    def writeParamsToStream(self, *args):
        """writeParamsToStream(linearMapping self, ostream & os)"""
        return _ndlml.linearMapping_writeParamsToStream(self, *args)

    def readParamsFromStream(self, *args):
        """readParamsFromStream(linearMapping self, istream & _is)"""
        return _ndlml.linearMapping_readParamsFromStream(self, *args)

    def optimise(self, iters=1000):
        """
        optimise(linearMapping self, unsigned int iters=1000)
        optimise(linearMapping self)
        """
        return _ndlml.linearMapping_optimise(self, iters)

    def equals(self, *args):
        """
        equals(linearMapping self, linearMapping model, double tol=ndlutil::MATCHTOL) -> bool
        equals(linearMapping self, linearMapping model) -> bool
        """
        return _ndlml.linearMapping_equals(self, *args)

    def getOptNumParams(self):
        """getOptNumParams(linearMapping self) -> unsigned int"""
        return _ndlml.linearMapping_getOptNumParams(self)

    def getOptParams(self, *args):
        """getOptParams(linearMapping self, matrix param)"""
        return _ndlml.linearMapping_getOptParams(self, *args)

    def setOptParams(self, *args):
        """setOptParams(linearMapping self, matrix param)"""
        return _ndlml.linearMapping_setOptParams(self, *args)

    def computeObjectiveGradParams(self, *args):
        """computeObjectiveGradParams(linearMapping self, matrix g) -> double"""
        return _ndlml.linearMapping_computeObjectiveGradParams(self, *args)

    def computeObjectiveVal(self):
        """computeObjectiveVal(linearMapping self) -> double"""
        return _ndlml.linearMapping_computeObjectiveVal(self)

linearMapping_swigregister = _ndlml.linearMapping_swigregister
linearMapping_swigregister(linearMapping)
MLTOOLSVERSION = cvar.MLTOOLSVERSION

class mlpMapping(CMapModel,COptimisable,CStreamInterface,CMatInterface):
    """Proxy of C++ CMlpMapping class"""
    __swig_setmethods__ = {}
    for _s in [CMapModel,COptimisable,CStreamInterface,CMatInterface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, mlpMapping, name, value)
    __swig_getmethods__ = {}
    for _s in [CMapModel,COptimisable,CStreamInterface,CMatInterface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, mlpMapping, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(CMlpMapping self) -> mlpMapping
        __init__(CMlpMapping self, matrix pXin, matrix pyOut, unsigned int nhidden, int verbos=2) -> mlpMapping
        __init__(CMlpMapping self, matrix pXin, matrix pyOut, unsigned int nhidden) -> mlpMapping
        """
        this = _ndlml.new_mlpMapping(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ndlml.delete_mlpMapping
    __del__ = lambda self : None;
    def clone(self):
        """clone(mlpMapping self) -> mlpMapping"""
        return _ndlml.mlpMapping_clone(self)

    def initStoreage(self):
        """initStoreage(mlpMapping self)"""
        return _ndlml.mlpMapping_initStoreage(self)

    def initVals(self):
        """initVals(mlpMapping self)"""
        return _ndlml.mlpMapping_initVals(self)

    def out(self, *args):
        """out(mlpMapping self, matrix yPred, matrix inData)"""
        return _ndlml.mlpMapping_out(self, *args)

    def outGradParams(self, *args):
        """outGradParams(mlpMapping self, matrix g, matrix inData, unsigned int i, unsigned int j) -> double"""
        return _ndlml.mlpMapping_outGradParams(self, *args)

    def outGradX(self, *args):
        """outGradX(mlpMapping self, matrix g, matrix inData, unsigned int i, unsigned int j) -> double"""
        return _ndlml.mlpMapping_outGradX(self, *args)

    def setWeights(self, *args):
        """setWeights(mlpMapping self, matrix W, unsigned int layer)"""
        return _ndlml.mlpMapping_setWeights(self, *args)

    def setBias(self, *args):
        """setBias(mlpMapping self, matrix b, unsigned int layer)"""
        return _ndlml.mlpMapping_setBias(self, *args)

    def logLikelihood(self):
        """logLikelihood(mlpMapping self) -> double"""
        return _ndlml.mlpMapping_logLikelihood(self)

    def logLikelihoodGradient(self, *args):
        """logLikelihoodGradient(mlpMapping self, matrix g) -> double"""
        return _ndlml.mlpMapping_logLikelihoodGradient(self, *args)

    def updateG(self):
        """updateG(mlpMapping self)"""
        return _ndlml.mlpMapping_updateG(self)

    def pointLogLikelihood(self, *args):
        """pointLogLikelihood(mlpMapping self, matrix yOut, matrix Xin) -> double"""
        return _ndlml.mlpMapping_pointLogLikelihood(self, *args)

    def display(self, *args):
        """display(mlpMapping self, ostream & os)"""
        return _ndlml.mlpMapping_display(self, *args)

    def writeParamsToStream(self, *args):
        """writeParamsToStream(mlpMapping self, ostream & os)"""
        return _ndlml.mlpMapping_writeParamsToStream(self, *args)

    def readParamsFromStream(self, *args):
        """readParamsFromStream(mlpMapping self, istream & _is)"""
        return _ndlml.mlpMapping_readParamsFromStream(self, *args)

    def getHiddenDim(self):
        """getHiddenDim(mlpMapping self) -> unsigned int"""
        return _ndlml.mlpMapping_getHiddenDim(self)

    def optimise(self, iters=1000):
        """
        optimise(mlpMapping self, unsigned int iters=1000)
        optimise(mlpMapping self)
        """
        return _ndlml.mlpMapping_optimise(self, iters)

    def equals(self, *args):
        """
        equals(mlpMapping self, mlpMapping model, double tol=ndlutil::MATCHTOL) -> bool
        equals(mlpMapping self, mlpMapping model) -> bool
        """
        return _ndlml.mlpMapping_equals(self, *args)

    def getOptNumParams(self):
        """getOptNumParams(mlpMapping self) -> unsigned int"""
        return _ndlml.mlpMapping_getOptNumParams(self)

    def getOptParams(self, *args):
        """getOptParams(mlpMapping self, matrix param)"""
        return _ndlml.mlpMapping_getOptParams(self, *args)

    def setOptParams(self, *args):
        """setOptParams(mlpMapping self, matrix param)"""
        return _ndlml.mlpMapping_setOptParams(self, *args)

    def computeObjectiveGradParams(self, *args):
        """computeObjectiveGradParams(mlpMapping self, matrix g) -> double"""
        return _ndlml.mlpMapping_computeObjectiveGradParams(self, *args)

    def computeObjectiveVal(self):
        """computeObjectiveVal(mlpMapping self) -> double"""
        return _ndlml.mlpMapping_computeObjectiveVal(self)

mlpMapping_swigregister = _ndlml.mlpMapping_swigregister
mlpMapping_swigregister(mlpMapping)

class ivm(CMapModel,CProbabilisticOptimisable,CStreamInterface,CMatInterface):
    """Proxy of C++ CIvm class"""
    __swig_setmethods__ = {}
    for _s in [CMapModel,CProbabilisticOptimisable,CStreamInterface,CMatInterface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ivm, name, value)
    __swig_getmethods__ = {}
    for _s in [CMapModel,CProbabilisticOptimisable,CStreamInterface,CMatInterface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ivm, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(CIvm self) -> ivm
        __init__(CIvm self, matrix inData, matrix targetData, kern kernel, ndlnoise noiseModel, int selectCrit, 
            unsigned int dVal, int verbos=2) -> ivm
        __init__(CIvm self, matrix inData, matrix targetData, kern kernel, ndlnoise noiseModel, int selectCrit, 
            unsigned int dVal) -> ivm
        __init__(CIvm self, matrix actX, matrix actY, matrix mmat, matrix betamat, vectorui actSet, kern kernel, 
            ndlnoise noiseModel, int selectCrit=ENTROPY, int verbos=2) -> ivm
        __init__(CIvm self, matrix actX, matrix actY, matrix mmat, matrix betamat, vectorui actSet, kern kernel, 
            ndlnoise noiseModel, int selectCrit=ENTROPY) -> ivm
        __init__(CIvm self, matrix actX, matrix actY, matrix mmat, matrix betamat, vectorui actSet, kern kernel, 
            ndlnoise noiseModel) -> ivm
        """
        this = _ndlml.new_ivm(*args)
        try: self.this.append(this)
        except: self.this = this
    def writeParamsToStream(self, *args):
        """writeParamsToStream(ivm self, ostream & os)"""
        return _ndlml.ivm_writeParamsToStream(self, *args)

    def readParamsFromStream(self, *args):
        """readParamsFromStream(ivm self, istream & _is)"""
        return _ndlml.ivm_readParamsFromStream(self, *args)

    def getNumActive(self):
        """getNumActive(ivm self) -> unsigned int"""
        return _ndlml.ivm_getNumActive(self)

    def setNumActive(self, *args):
        """setNumActive(ivm self, unsigned int val)"""
        return _ndlml.ivm_setNumActive(self, *args)

    def init(self):
        """init(ivm self)"""
        return _ndlml.ivm_init(self)

    def initStoreage(self):
        """initStoreage(ivm self)"""
        return _ndlml.ivm_initStoreage(self)

    def initVals(self):
        """initVals(ivm self)"""
        return _ndlml.ivm_initVals(self)

    def selectPoints(self):
        """selectPoints(ivm self)"""
        return _ndlml.ivm_selectPoints(self)

    def addPoint(self, *args):
        """addPoint(ivm self, unsigned int index)"""
        return _ndlml.ivm_addPoint(self, *args)

    def updateSite(self, *args):
        """updateSite(ivm self, unsigned int index)"""
        return _ndlml.ivm_updateSite(self, *args)

    def updateM(self, *args):
        """updateM(ivm self, unsigned int index)"""
        return _ndlml.ivm_updateM(self, *args)

    def selectPointAdd(self):
        """selectPointAdd(ivm self) -> unsigned int"""
        return _ndlml.ivm_selectPointAdd(self)

    def entropyPointAdd(self):
        """entropyPointAdd(ivm self) -> unsigned int"""
        return _ndlml.ivm_entropyPointAdd(self)

    def randomPointAdd(self):
        """randomPointAdd(ivm self) -> unsigned int"""
        return _ndlml.ivm_randomPointAdd(self)

    def entropyChangeAdd(self, *args):
        """entropyChangeAdd(ivm self, unsigned int arg2) -> double"""
        return _ndlml.ivm_entropyChangeAdd(self, *args)

    def selectPointRemove(self):
        """selectPointRemove(ivm self) -> unsigned int"""
        return _ndlml.ivm_selectPointRemove(self)

    def entropyPointRemove(self):
        """entropyPointRemove(ivm self) -> unsigned int"""
        return _ndlml.ivm_entropyPointRemove(self)

    def randomPointRemove(self):
        """randomPointRemove(ivm self) -> unsigned int"""
        return _ndlml.ivm_randomPointRemove(self)

    def entropyChangeRemove(self, *args):
        """entropyChangeRemove(ivm self, unsigned int arg2) -> double"""
        return _ndlml.ivm_entropyChangeRemove(self, *args)

    def test(self, *args):
        """test(ivm self, matrix ytest, matrix Xin)"""
        return _ndlml.ivm_test(self, *args)

    def likelihoods(self, *args):
        """likelihoods(ivm self, matrix pout, matrix yTest, matrix Xin)"""
        return _ndlml.ivm_likelihoods(self, *args)

    def out(self, *args):
        """
        out(ivm self, matrix yPred, matrix inData)
        out(ivm self, matrix yPred, matrix probPred, matrix inData)
        """
        return _ndlml.ivm_out(self, *args)

    def outGradParams(self, *args):
        """outGradParams(ivm self, matrix g, matrix Xin, unsigned int pointNo, unsigned int outputNo) -> double"""
        return _ndlml.ivm_outGradParams(self, *args)

    def outGradX(self, *args):
        """outGradX(ivm self, matrix g, matrix Xin, unsigned int pointNo, unsigned int outputNo) -> double"""
        return _ndlml.ivm_outGradX(self, *args)

    def posteriorMeanVar(self, *args):
        """posteriorMeanVar(ivm self, matrix mu, matrix varSigma, matrix X)"""
        return _ndlml.ivm_posteriorMeanVar(self, *args)

    def getNoiseName(self):
        """getNoiseName(ivm self) -> std::string"""
        return _ndlml.ivm_getNoiseName(self)

    def changeEntropy(self, *args):
        """changeEntropy(ivm self, double val)"""
        return _ndlml.ivm_changeEntropy(self, *args)

    def updateCovGradient(self, *args):
        """updateCovGradient(ivm self, unsigned int index)"""
        return _ndlml.ivm_updateCovGradient(self, *args)

    def setTerminate(self, *args):
        """setTerminate(ivm self, bool const val)"""
        return _ndlml.ivm_setTerminate(self, *args)

    def setEpUpdate(self, *args):
        """setEpUpdate(ivm self, bool const val)"""
        return _ndlml.ivm_setEpUpdate(self, *args)

    def isTerminate(self):
        """isTerminate(ivm self) -> bool"""
        return _ndlml.ivm_isTerminate(self)

    def isEpUpdate(self):
        """isEpUpdate(ivm self) -> bool"""
        return _ndlml.ivm_isEpUpdate(self)

    def updateNuG(self):
        """updateNuG(ivm self)"""
        return _ndlml.ivm_updateNuG(self)

    def updateK(self):
        """updateK(ivm self)"""
        return _ndlml.ivm_updateK(self)

    def updateInvK(self, index=0):
        """
        updateInvK(ivm self, unsigned int index=0)
        updateInvK(ivm self)
        """
        return _ndlml.ivm_updateInvK(self, index)

    def logLikelihood(self, *args):
        """
        logLikelihood(ivm self, matrix yTest, matrix Xin) -> double
        logLikelihood(ivm self) -> double
        """
        return _ndlml.ivm_logLikelihood(self, *args)

    def logLikelihoodGradient(self, *args):
        """logLikelihoodGradient(ivm self, matrix g) -> double"""
        return _ndlml.ivm_logLikelihoodGradient(self, *args)

    def optimise(self, maxIters=15, kernIters=100, noiseIters=100):
        """
        optimise(ivm self, unsigned int maxIters=15, unsigned int kernIters=100, unsigned int noiseIters=100)
        optimise(ivm self, unsigned int maxIters=15, unsigned int kernIters=100)
        optimise(ivm self, unsigned int maxIters=15)
        optimise(ivm self)
        """
        return _ndlml.ivm_optimise(self, maxIters, kernIters, noiseIters)

    def equals(self, *args):
        """
        equals(ivm self, ivm model, double tol=ndlutil::MATCHTOL) -> bool
        equals(ivm self, ivm model) -> bool
        """
        return _ndlml.ivm_equals(self, *args)

    def display(self, *args):
        """display(ivm self, ostream & os)"""
        return _ndlml.ivm_display(self, *args)

    def getOptNumParams(self):
        """getOptNumParams(ivm self) -> unsigned int"""
        return _ndlml.ivm_getOptNumParams(self)

    def getOptParams(self, *args):
        """getOptParams(ivm self, matrix param)"""
        return _ndlml.ivm_getOptParams(self, *args)

    def setOptParams(self, *args):
        """setOptParams(ivm self, matrix param)"""
        return _ndlml.ivm_setOptParams(self, *args)

    def isSpherical(self):
        """isSpherical(ivm self) -> bool"""
        return _ndlml.ivm_isSpherical(self)

    def getTypeSelection(self):
        """getTypeSelection(ivm self) -> std::string"""
        return _ndlml.ivm_getTypeSelection(self)

    def setTypeSelection(self, *args):
        """
        setTypeSelection(ivm self, std::string const val)
        setTypeSelection(ivm self, unsigned int val)
        """
        return _ndlml.ivm_setTypeSelection(self, *args)

    def getActiveX(self, *args):
        """getActiveX(ivm self, unsigned int i, unsigned int j) -> double"""
        return _ndlml.ivm_getActiveX(self, *args)

    def getActivePoint(self, *args):
        """getActivePoint(ivm self, unsigned int i) -> unsigned int"""
        return _ndlml.ivm_getActivePoint(self, *args)

    __swig_setmethods__["pX"] = _ndlml.ivm_pX_set
    __swig_getmethods__["pX"] = _ndlml.ivm_pX_get
    __swig_setmethods__["py"] = _ndlml.ivm_py_set
    __swig_getmethods__["py"] = _ndlml.ivm_py_get
    __swig_setmethods__["nu"] = _ndlml.ivm_nu_set
    __swig_getmethods__["nu"] = _ndlml.ivm_nu_get
    __swig_setmethods__["g"] = _ndlml.ivm_g_set
    __swig_getmethods__["g"] = _ndlml.ivm_g_get
    __swig_setmethods__["Kstore"] = _ndlml.ivm_Kstore_set
    __swig_getmethods__["Kstore"] = _ndlml.ivm_Kstore_get
    __swig_setmethods__["m"] = _ndlml.ivm_m_set
    __swig_getmethods__["m"] = _ndlml.ivm_m_get
    __swig_setmethods__["beta"] = _ndlml.ivm_beta_set
    __swig_getmethods__["beta"] = _ndlml.ivm_beta_get
    __swig_setmethods__["covGrad"] = _ndlml.ivm_covGrad_set
    __swig_getmethods__["covGrad"] = _ndlml.ivm_covGrad_get
    __swig_setmethods__["invK"] = _ndlml.ivm_invK_set
    __swig_getmethods__["invK"] = _ndlml.ivm_invK_get
    __swig_setmethods__["logDetK"] = _ndlml.ivm_logDetK_set
    __swig_getmethods__["logDetK"] = _ndlml.ivm_logDetK_get
    __swig_setmethods__["K"] = _ndlml.ivm_K_set
    __swig_getmethods__["K"] = _ndlml.ivm_K_get
    __swig_setmethods__["s"] = _ndlml.ivm_s_set
    __swig_getmethods__["s"] = _ndlml.ivm_s_get
    __swig_setmethods__["a"] = _ndlml.ivm_a_set
    __swig_getmethods__["a"] = _ndlml.ivm_a_get
    __swig_setmethods__["ainv"] = _ndlml.ivm_ainv_set
    __swig_getmethods__["ainv"] = _ndlml.ivm_ainv_get
    __swig_setmethods__["activeX"] = _ndlml.ivm_activeX_set
    __swig_getmethods__["activeX"] = _ndlml.ivm_activeX_get
    __swig_setmethods__["activeY"] = _ndlml.ivm_activeY_set
    __swig_getmethods__["activeY"] = _ndlml.ivm_activeY_get
    __swig_setmethods__["M"] = _ndlml.ivm_M_set
    __swig_getmethods__["M"] = _ndlml.ivm_M_get
    __swig_setmethods__["L"] = _ndlml.ivm_L_set
    __swig_getmethods__["L"] = _ndlml.ivm_L_get
    __swig_setmethods__["Linv"] = _ndlml.ivm_Linv_set
    __swig_getmethods__["Linv"] = _ndlml.ivm_Linv_get
    __swig_setmethods__["activeSet"] = _ndlml.ivm_activeSet_set
    __swig_getmethods__["activeSet"] = _ndlml.ivm_activeSet_get
    __swig_setmethods__["inactiveSet"] = _ndlml.ivm_inactiveSet_set
    __swig_getmethods__["inactiveSet"] = _ndlml.ivm_inactiveSet_get
    __swig_setmethods__["pkern"] = _ndlml.ivm_pkern_set
    __swig_getmethods__["pkern"] = _ndlml.ivm_pkern_get
    __swig_setmethods__["pnoise"] = _ndlml.ivm_pnoise_set
    __swig_getmethods__["pnoise"] = _ndlml.ivm_pnoise_get
    ENTROPY = _ndlml.ivm_ENTROPY
    RENTROPY = _ndlml.ivm_RENTROPY
    RANDOM = _ndlml.ivm_RANDOM
    def __str__(self): return _ndlml.ivm___str__(self)
    __swig_destroy__ = _ndlml.delete_ivm
    __del__ = lambda self : None;
ivm_swigregister = _ndlml.ivm_swigregister
ivm_swigregister(ivm)
NULOW = cvar.NULOW
IVMVERSION = cvar.IVMVERSION


def writeIvmToStream(*args):
  """writeIvmToStream(ivm model, ostream & out)"""
  return _ndlml.writeIvmToStream(*args)

def writeIvmToFile(*args):
  """
    writeIvmToFile(ivm model, std::string const modelFileName, std::string const comment="")
    writeIvmToFile(ivm model, std::string const modelFileName)
    """
  return _ndlml.writeIvmToFile(*args)

def readIvmFromStream(*args):
  """readIvmFromStream(istream & _in) -> ivm"""
  return _ndlml.readIvmFromStream(*args)

def readIvmFromFile(*args):
  """
    readIvmFromFile(std::string const modelfileName, int verbosity=2) -> ivm
    readIvmFromFile(std::string const modelfileName) -> ivm
    """
  return _ndlml.readIvmFromFile(*args)
class gp(CMapModel,CProbabilisticOptimisable,CStreamInterface,CMatInterface):
    """Proxy of C++ CGp class"""
    __swig_setmethods__ = {}
    for _s in [CMapModel,CProbabilisticOptimisable,CStreamInterface,CMatInterface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, gp, name, value)
    __swig_getmethods__ = {}
    for _s in [CMapModel,CProbabilisticOptimisable,CStreamInterface,CMatInterface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, gp, name)
    __repr__ = _swig_repr
    FTC = _ndlml.gp_FTC
    DTC = _ndlml.gp_DTC
    FITC = _ndlml.gp_FITC
    PITC = _ndlml.gp_PITC
    DTCVAR = _ndlml.gp_DTCVAR
    def __init__(self, *args): 
        """
        __init__(CGp self) -> gp
        __init__(CGp self, kern kernel, ndlnoise nois, matrix Xin, int approxType=FTC, unsigned int actSetSize=0, 
            int verbos=2) -> gp
        __init__(CGp self, kern kernel, ndlnoise nois, matrix Xin, int approxType=FTC, unsigned int actSetSize=0) -> gp
        __init__(CGp self, kern kernel, ndlnoise nois, matrix Xin, int approxType=FTC) -> gp
        __init__(CGp self, kern kernel, ndlnoise nois, matrix Xin) -> gp
        __init__(CGp self, unsigned int q, unsigned int d, matrix Xin, matrix yin, kern kernel, ndlnoise nois, 
            int approxType=FTC, unsigned int actSetSize=0, int verbos=2) -> gp
        __init__(CGp self, unsigned int q, unsigned int d, matrix Xin, matrix yin, kern kernel, ndlnoise nois, 
            int approxType=FTC, unsigned int actSetSize=0) -> gp
        __init__(CGp self, unsigned int q, unsigned int d, matrix Xin, matrix yin, kern kernel, ndlnoise nois, 
            int approxType=FTC) -> gp
        __init__(CGp self, unsigned int q, unsigned int d, matrix Xin, matrix yin, kern kernel, ndlnoise nois) -> gp
        """
        this = _ndlml.new_gp(*args)
        try: self.this.append(this)
        except: self.this = this
    def initOptimiseXStoreage(self):
        """initOptimiseXStoreage(gp self)"""
        return _ndlml.gp_initOptimiseXStoreage(self)

    def initSparseStoreage(self):
        """initSparseStoreage(gp self)"""
        return _ndlml.gp_initSparseStoreage(self)

    def initKernStoreage(self):
        """initKernStoreage(gp self)"""
        return _ndlml.gp_initKernStoreage(self)

    def initStoreage(self):
        """initStoreage(gp self)"""
        return _ndlml.gp_initStoreage(self)

    def initVals(self):
        """initVals(gp self)"""
        return _ndlml.gp_initVals(self)

    def out(self, *args):
        """
        out(gp self, matrix yPred, matrix inData)
        out(gp self, matrix yPred, matrix probPred, matrix inData)
        """
        return _ndlml.gp_out(self, *args)

    def outGradParams(self, *args):
        """outGradParams(gp self, matrix g, matrix Xin, unsigned int pointNo, unsigned int outputNo) -> double"""
        return _ndlml.gp_outGradParams(self, *args)

    def outGradX(self, *args):
        """outGradX(gp self, matrix g, matrix Xin, unsigned int pointNo, unsigned int outputNo) -> double"""
        return _ndlml.gp_outGradX(self, *args)

    def updateAlpha(self):
        """updateAlpha(gp self)"""
        return _ndlml.gp_updateAlpha(self)

    def posteriorMeanVar(self, *args):
        """posteriorMeanVar(gp self, matrix mu, matrix varSigma, matrix X)"""
        return _ndlml.gp_posteriorMeanVar(self, *args)

    def posteriorMean(self, *args):
        """posteriorMean(gp self, matrix mu, matrix X)"""
        return _ndlml.gp_posteriorMean(self, *args)

    def updateCovGradient(self, *args):
        """updateCovGradient(gp self, unsigned int index, matrix work_invK_Y)"""
        return _ndlml.gp_updateCovGradient(self, *args)

    def updateX(self):
        """updateX(gp self)"""
        return _ndlml.gp_updateX(self)

    def updateM(self):
        """updateM(gp self)"""
        return _ndlml.gp_updateM(self)

    def updateK(self):
        """updateK(gp self)"""
        return _ndlml.gp_updateK(self)

    def updateAD(self):
        """updateAD(gp self)"""
        return _ndlml.gp_updateAD(self)

    def updateG(self):
        """updateG(gp self)"""
        return _ndlml.gp_updateG(self)

    def logLikelihood(self):
        """logLikelihood(gp self) -> double"""
        return _ndlml.gp_logLikelihood(self)

    def logLikelihoodGradient(self, *args):
        """logLikelihoodGradient(gp self, matrix g) -> double"""
        return _ndlml.gp_logLikelihoodGradient(self, *args)

    def gpCovGrads(self):
        """gpCovGrads(gp self)"""
        return _ndlml.gp_gpCovGrads(self)

    def pointLogLikelihood(self, *args):
        """pointLogLikelihood(gp self, matrix y, matrix X)"""
        return _ndlml.gp_pointLogLikelihood(self, *args)

    def optimise(self, iters=1000):
        """
        optimise(gp self, unsigned int iters=1000)
        optimise(gp self)
        """
        return _ndlml.gp_optimise(self, iters)

    def equals(self, *args):
        """
        equals(gp self, gp model, double tol=ndlutil::MATCHTOL) -> bool
        equals(gp self, gp model) -> bool
        """
        return _ndlml.gp_equals(self, *args)

    def display(self, *args):
        """display(gp self, ostream & os)"""
        return _ndlml.gp_display(self, *args)

    def getOptNumParams(self):
        """getOptNumParams(gp self) -> unsigned int"""
        return _ndlml.gp_getOptNumParams(self)

    def getOptParams(self, *args):
        """getOptParams(gp self, matrix param)"""
        return _ndlml.gp_getOptParams(self, *args)

    def setOptParams(self, *args):
        """setOptParams(gp self, matrix param)"""
        return _ndlml.gp_setOptParams(self, *args)

    def getNoiseType(self):
        """getNoiseType(gp self) -> std::string"""
        return _ndlml.gp_getNoiseType(self)

    def readParamsFromStream(self, *args):
        """readParamsFromStream(gp self, istream & _in)"""
        return _ndlml.gp_readParamsFromStream(self, *args)

    def writeParamsToStream(self, *args):
        """writeParamsToStream(gp self, ostream & out)"""
        return _ndlml.gp_writeParamsToStream(self, *args)

    def getNumActive(self):
        """getNumActive(gp self) -> unsigned int"""
        return _ndlml.gp_getNumActive(self)

    def setNumActive(self, *args):
        """setNumActive(gp self, unsigned int val)"""
        return _ndlml.gp_setNumActive(self, *args)

    def setTargetVals(self, *args):
        """
        setTargetVals(gp self, matrix yvals)
        setTargetVals(gp self, matrix pyvals)
        """
        return _ndlml.gp_setTargetVals(self, *args)

    def setInputVals(self, *args):
        """
        setInputVals(gp self, matrix Xvals)
        setInputVals(gp self, matrix pXvals)
        """
        return _ndlml.gp_setInputVals(self, *args)

    def setInducingVals(self, *args):
        """setInducingVals(gp self, matrix Xvals)"""
        return _ndlml.gp_setInducingVals(self, *args)

    def isOutputScaleLearnt(self):
        """isOutputScaleLearnt(gp self) -> bool"""
        return _ndlml.gp_isOutputScaleLearnt(self)

    def setOutputScaleLearnt(self, *args):
        """setOutputScaleLearnt(gp self, bool const val)"""
        return _ndlml.gp_setOutputScaleLearnt(self, *args)

    def isOutputBiasLearnt(self):
        """isOutputBiasLearnt(gp self) -> bool"""
        return _ndlml.gp_isOutputBiasLearnt(self)

    def setOutputBiasLearnt(self, *args):
        """setOutputBiasLearnt(gp self, bool const val)"""
        return _ndlml.gp_setOutputBiasLearnt(self, *args)

    def getScaleVal(self, *args):
        """getScaleVal(gp self, unsigned int index) -> double"""
        return _ndlml.gp_getScaleVal(self, *args)

    def setScaleVal(self, *args):
        """setScaleVal(gp self, double val, unsigned int index)"""
        return _ndlml.gp_setScaleVal(self, *args)

    def setScale(self, *args):
        """setScale(gp self, matrix scal)"""
        return _ndlml.gp_setScale(self, *args)

    def setActiveSet(self, *args):
        """setActiveSet(gp self, matrix Xu)"""
        return _ndlml.gp_setActiveSet(self, *args)

    def getBiasVal(self, *args):
        """getBiasVal(gp self, unsigned int index) -> double"""
        return _ndlml.gp_getBiasVal(self, *args)

    def setBiasVal(self, *args):
        """setBiasVal(gp self, double val, unsigned int index)"""
        return _ndlml.gp_setBiasVal(self, *args)

    def setBias(self, *args):
        """setBias(gp self, matrix bia)"""
        return _ndlml.gp_setBias(self, *args)

    def getBetaVal(self, i=0, j=0):
        """
        getBetaVal(gp self, unsigned int i=0, unsigned int j=0) -> double
        getBetaVal(gp self, unsigned int i=0) -> double
        getBetaVal(gp self) -> double
        """
        return _ndlml.gp_getBetaVal(self, i, j)

    def setBetaVal(self, *args):
        """
        setBetaVal(gp self, double val, unsigned int i=0, unsigned int j=0)
        setBetaVal(gp self, double val, unsigned int i=0)
        setBetaVal(gp self, double val)
        """
        return _ndlml.gp_setBetaVal(self, *args)

    def setBetaVals(self, *args):
        """setBetaVals(gp self, double val)"""
        return _ndlml.gp_setBetaVals(self, *args)

    def setBeta(self, *args):
        """setBeta(gp self, matrix bet)"""
        return _ndlml.gp_setBeta(self, *args)

    def getApproximationType(self):
        """getApproximationType(gp self) -> int"""
        return _ndlml.gp_getApproximationType(self)

    def getApproximationStr(self):
        """getApproximationStr(gp self) -> std::string"""
        return _ndlml.gp_getApproximationStr(self)

    def setApproximationStr(self, *args):
        """setApproximationStr(gp self, std::string const val)"""
        return _ndlml.gp_setApproximationStr(self, *args)

    def setApproximationType(self, *args):
        """setApproximationType(gp self, unsigned int val)"""
        return _ndlml.gp_setApproximationType(self, *args)

    def isSparseApproximation(self):
        """isSparseApproximation(gp self) -> bool"""
        return _ndlml.gp_isSparseApproximation(self)

    def setSparseApproximation(self, *args):
        """setSparseApproximation(gp self, bool const val)"""
        return _ndlml.gp_setSparseApproximation(self, *args)

    def isSpherical(self):
        """isSpherical(gp self) -> bool"""
        return _ndlml.gp_isSpherical(self)

    def setSpherical(self, *args):
        """setSpherical(gp self, bool const val)"""
        return _ndlml.gp_setSpherical(self, *args)

    def isInducingFixed(self):
        """isInducingFixed(gp self) -> bool"""
        return _ndlml.gp_isInducingFixed(self)

    def setInducingFixed(self, *args):
        """setInducingFixed(gp self, bool const val)"""
        return _ndlml.gp_setInducingFixed(self, *args)

    def isKupToDate(self):
        """isKupToDate(gp self) -> bool"""
        return _ndlml.gp_isKupToDate(self)

    def setKupToDate(self, *args):
        """setKupToDate(gp self, bool const val)"""
        return _ndlml.gp_setKupToDate(self, *args)

    def isADupToDate(self):
        """isADupToDate(gp self) -> bool"""
        return _ndlml.gp_isADupToDate(self)

    def setADupToDate(self, *args):
        """setADupToDate(gp self, bool const val)"""
        return _ndlml.gp_setADupToDate(self, *args)

    def isAlphaUpToDate(self):
        """isAlphaUpToDate(gp self) -> bool"""
        return _ndlml.gp_isAlphaUpToDate(self)

    def setAlphaUpToDate(self, *args):
        """setAlphaUpToDate(gp self, bool const val)"""
        return _ndlml.gp_setAlphaUpToDate(self, *args)

    def isMupToDate(self):
        """isMupToDate(gp self) -> bool"""
        return _ndlml.gp_isMupToDate(self)

    def setMupToDate(self, *args):
        """setMupToDate(gp self, bool const val)"""
        return _ndlml.gp_setMupToDate(self, *args)

    def isOptimiseX(self):
        """isOptimiseX(gp self) -> bool"""
        return _ndlml.gp_isOptimiseX(self)

    def setOptimiseX(self, *args):
        """setOptimiseX(gp self, bool const val)"""
        return _ndlml.gp_setOptimiseX(self, *args)

    def isBackConstrained(self):
        """isBackConstrained(gp self) -> bool"""
        return _ndlml.gp_isBackConstrained(self)

    def setBackConstrained(self, *args):
        """setBackConstrained(gp self, bool const val)"""
        return _ndlml.gp_setBackConstrained(self, *args)

    def getKernel(self):
        """getKernel(gp self) -> kern"""
        return _ndlml.gp_getKernel(self)

    __swig_setmethods__["backConstraintModel"] = _ndlml.gp_backConstraintModel_set
    __swig_getmethods__["backConstraintModel"] = _ndlml.gp_backConstraintModel_get
    __swig_setmethods__["X_u"] = _ndlml.gp_X_u_set
    __swig_getmethods__["X_u"] = _ndlml.gp_X_u_get
    __swig_setmethods__["pX"] = _ndlml.gp_pX_set
    __swig_getmethods__["pX"] = _ndlml.gp_pX_get
    __swig_setmethods__["py"] = _ndlml.gp_py_set
    __swig_getmethods__["py"] = _ndlml.gp_py_get
    def __eq__(self, *args): return _ndlml.gp___eq__(self, *args)
    def __str__(self): return _ndlml.gp___str__(self)
    __swig_destroy__ = _ndlml.delete_gp
    __del__ = lambda self : None;
gp_swigregister = _ndlml.gp_swigregister
gp_swigregister(gp)
GPVERSION = cvar.GPVERSION


def writeGpToStream(*args):
  """writeGpToStream(gp model, ostream & out)"""
  return _ndlml.writeGpToStream(*args)

def writeGpToFile(*args):
  """
    writeGpToFile(gp model, std::string const modelFileName, std::string const comment="")
    writeGpToFile(gp model, std::string const modelFileName)
    """
  return _ndlml.writeGpToFile(*args)

def readGpFromStream(*args):
  """readGpFromStream(istream & _in) -> gp"""
  return _ndlml.readGpFromStream(*args)

def readGpFromFile(*args):
  """
    readGpFromFile(std::string const modelfileName, int verbosity=2) -> gp
    readGpFromFile(std::string const modelfileName) -> gp
    """
  return _ndlml.readGpFromFile(*args)
# This file is compatible with both classic and new-style classes.


